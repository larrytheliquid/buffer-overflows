Project 1
CS 591 Intro to Security
Fall 2012
Portland State University
Nathan Collins, Larry Diehl, Caylee Hogg

Overview
========

There are two key properties of the architecture that we rely on:

1. The good and evil pointers are located after (in memory, before on
the stack) the name and pw buffers.  So, the evil pointer can be
overwritten by overflowing name or pw.

2. The endianness is s.t. the low order bytes of the address in a
pointer occur in the initial bytes of the pointer's memory ("Big
Endian").  This is important because we overwrite the address byte by
byte, and so are responsible for the order in which the address bytes
are written.

Both exploits use the same strategy.  We overrun name's buffer to
change the address of the evil pointer, which in turn affects what is
printed when goodbye(evil) is called (our name and password strings
are not equated by match()).

Memory layout
=============

The main routine's stack frame:

  memory    address of first byte
  ------    ---------------------
            rbp
  --------
  | good |  rbp - 8
  --------
  | evil |  rbp - 16  (= 8 + 8)
  --------
  | name |  rbp - 144 (= 16 + 128)
  --------
  | pw   |  rbp - 272 (= 144 + 128)
  --------

Part 1
======

We write the value of good into evil, so that goodbye(evil) prints the
welcome string.  We get the value of good from the dissambly of main,
as the value stored into rbp - 8.

When creating our exploit string, we believed (wrongly) that scanf()
stopped at null (i.e., that scanf() treated the input as a
C-string). However, due to endianness, the address we write into evil
has zeros only in the final bytes, and so it suffices to write the
initial non-zero bytes followed by a zero (null terminating) byte.

To run the exploit:

  make all
  ./badbuf < input1.txt

Part 2
======

We write the value of an 8-byte-aligned address in name or pw into the
evil pointer.  We fill name and pw with 31 copies of the 8-byte
character sequence "ownz_u!\0" (and a different string in the first 8
bytes of pw to make 'match(name,pw)' return false).  We are able to do
this because scanf() does not stop at null ('\0'), but rather only at
EOF or white space.

The stack memory backing name and pw depends on where the stack
starts, which in turn depends on the environment in which the program
is run (the environment is stored above the stack).  So, we have two
attacks: one where the exploit is generated in the current
environment, and one where exploit is generated once beforehand, but
based on some information about the stack.

Exploit generated per attack
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We run the getfp.c program (like getsp.c, but returning %rbp instead)
to get an idea where the stack starts.

To run the exploit:

  make all
  ./getfp | ./part2.py > input2.txt ; ./badbuf < input2.txt ; echo

The make file does not generate input2.txt for you, since commands run
in make see a different stack top.


Single "robust" exploit for all attacks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
