var search_data = {"index":{"searchIndex":["object","packetfu","arpheader","arpheadermixin","arppacket","addripv6","capture","config","ethheader","ethheadermixin","ethmac","ethnic","ethoui","ethpacket","hsrpheader","hsrpheadermixin","hsrppacket","icmpheader","icmpheadermixin","icmppacket","ipheader","ipheadermixin","ippacket","ipv6header","ipv6headermixin","ipv6packet","inject","invalidheader","invalidpacket","octets","packet","pcapfile","pcapheader","pcappacket","pcappackets","read","tcpheader","tcpheadermixin","tcppacket","tcpecn","tcpflags","tcphlen","tcpoption","echo","echoreply","eol","mss","nop","sack","sackok","ts","ws","tcpoptions","tcpreserved","timestamp","udpheader","udpheadermixin","udppacket","utils","write","struct","structfu","int","int16","int16be","int16le","int32","int32be","int32le","int8","intstring","string","==()","a2f()","a2f()","a2f!()","a2w()","ack=()","add_packet_class()","append()","append()","arp()","arp()","arp()","arp_daddr_ip()","arp_daddr_ip()","arp_daddr_ip=()","arp_daddr_ip=()","arp_daddr_mac()","arp_daddr_mac()","arp_daddr_mac=()","arp_daddr_mac=()","arp_dst_ip()","arp_dst_ip()","arp_dst_ip=()","arp_dst_ip=()","arp_dst_ip_readable()","arp_dst_ip_readable()","arp_dst_mac()","arp_dst_mac()","arp_dst_mac=()","arp_dst_mac=()","arp_dst_mac_readable()","arp_dst_mac_readable()","arp_everyone()","arp_hw()","arp_hw()","arp_hw=()","arp_hw=()","arp_hw_len()","arp_hw_len()","arp_hw_len=()","arp_hw_len=()","arp_opcode()","arp_opcode()","arp_opcode=()","arp_opcode=()","arp_proto()","arp_proto()","arp_proto=()","arp_proto=()","arp_proto_len()","arp_proto_len()","arp_proto_len=()","arp_proto_len=()","arp_proto_readable()","arp_proto_readable()","arp_saddr_ip()","arp_saddr_ip()","arp_saddr_ip=()","arp_saddr_ip=()","arp_saddr_mac()","arp_saddr_mac()","arp_saddr_mac=()","arp_saddr_mac=()","arp_src_ip()","arp_src_ip()","arp_src_ip=()","arp_src_ip=()","arp_src_ip_readable()","arp_src_ip_readable()","arp_src_mac()","arp_src_mac()","arp_src_mac=()","arp_src_mac=()","arp_src_mac_readable()","arp_src_mac_readable()","array_to_file()","array_to_file()","array_to_file!()","array_to_wire()","at_least?()","banner()","binarize_version()","bits_to_s()","body=()","bpf()","build_oui_list()","calc()","can_parse?()","can_parse?()","can_parse?()","can_parse?()","can_parse?()","can_parse?()","can_parse?()","can_parse?()","can_parse?()","can_parse?()","capture()","classes()","clear()","clear()","clone()","clone()","config()","count_packet_types()","decode()","decode()","decode()","decode()","decode()","decode()","decode()","decode()","decode()","decode()","decode()","dissect()","dissection_table()","do_scan()","encode()","encode()","encode()","encode()","encode!()","eth_daddr()","eth_daddr()","eth_daddr=()","eth_daddr=()","eth_dst()","eth_dst()","eth_dst=()","eth_dst=()","eth_dst_readable()","eth_dst_readable()","eth_proto()","eth_proto()","eth_proto=()","eth_proto=()","eth_proto_readable()","eth_proto_readable()","eth_saddr()","eth_saddr()","eth_saddr=()","eth_saddr=()","eth_src()","eth_src()","eth_src=()","eth_src=()","eth_src_readable()","eth_src_readable()","f2a()","f2a()","file_to_array()","file_to_array()","file_to_array()","fin=()","force_binary()","force_binary()","force_binary()","force_binary()","format_packets()","gen_packets()","get_byte_order()","handle_is_identity()","has_optlen?()","has_value?()","hexify()","hsrp_addr()","hsrp_addr()","hsrp_addr=()","hsrp_addr=()","hsrp_group()","hsrp_group()","hsrp_group=()","hsrp_group=()","hsrp_hellotime()","hsrp_hellotime()","hsrp_hellotime=()","hsrp_hellotime=()","hsrp_holdtime()","hsrp_holdtime()","hsrp_holdtime=()","hsrp_holdtime=()","hsrp_opcode()","hsrp_opcode()","hsrp_opcode=()","hsrp_opcode=()","hsrp_password()","hsrp_password=()","hsrp_password_readable()","hsrp_password_readable()","hsrp_priority()","hsrp_priority()","hsrp_priority=()","hsrp_priority=()","hsrp_reserved()","hsrp_reserved()","hsrp_reserved=()","hsrp_reserved=()","hsrp_state()","hsrp_state()","hsrp_state=()","hsrp_state=()","hsrp_version()","hsrp_version()","hsrp_version=()","hsrp_version=()","hsrp_vip()","hsrp_vip=()","hsrp_vip_readable()","hsrp_vip_readable()","icmp_calc_sum()","icmp_calc_sum()","icmp_code()","icmp_code()","icmp_code=()","icmp_code=()","icmp_recalc()","icmp_recalc()","icmp_sum()","icmp_sum()","icmp_sum=()","icmp_sum=()","icmp_sum_readable()","icmp_sum_readable()","icmp_type()","icmp_type()","icmp_type=()","icmp_type=()","ifconfig()","inherited()","init_fields()","init_fields()","init_fields()","init_fields()","inject()","inspect()","inspect_hex()","inspect_style()","inspect_style=()","inspect_style=()","ip_calc_id()","ip_calc_id()","ip_calc_len()","ip_calc_len()","ip_calc_sum()","ip_calc_sum()","ip_daddr()","ip_daddr()","ip_daddr=()","ip_daddr=()","ip_dst()","ip_dst()","ip_dst=()","ip_dst=()","ip_dst_readable()","ip_dst_readable()","ip_frag()","ip_frag()","ip_frag=()","ip_frag=()","ip_hl()","ip_hl()","ip_hl=()","ip_hl=()","ip_hlen()","ip_hlen()","ip_id()","ip_id()","ip_id=()","ip_id=()","ip_id_readable()","ip_id_readable()","ip_len()","ip_len()","ip_len=()","ip_len=()","ip_proto()","ip_proto()","ip_proto=()","ip_proto=()","ip_recalc()","ip_recalc()","ip_saddr()","ip_saddr()","ip_saddr=()","ip_saddr=()","ip_src()","ip_src()","ip_src=()","ip_src=()","ip_src_readable()","ip_src_readable()","ip_sum()","ip_sum()","ip_sum=()","ip_sum=()","ip_sum_readable()","ip_sum_readable()","ip_tos()","ip_tos()","ip_tos=()","ip_tos=()","ip_ttl()","ip_ttl()","ip_ttl=()","ip_ttl=()","ip_v()","ip_v()","ip_v=()","ip_v=()","ipv6_calc_len()","ipv6_calc_len()","ipv6_class()","ipv6_class()","ipv6_class=()","ipv6_class=()","ipv6_daddr()","ipv6_daddr()","ipv6_daddr=()","ipv6_daddr=()","ipv6_dst()","ipv6_dst()","ipv6_dst=()","ipv6_dst=()","ipv6_dst_readable()","ipv6_dst_readable()","ipv6_hop()","ipv6_hop()","ipv6_hop=()","ipv6_hop=()","ipv6_label()","ipv6_label()","ipv6_label=()","ipv6_label=()","ipv6_len()","ipv6_len()","ipv6_len=()","ipv6_len=()","ipv6_next()","ipv6_next()","ipv6_next=()","ipv6_next=()","ipv6_recalc()","ipv6_recalc()","ipv6_saddr()","ipv6_saddr()","ipv6_saddr=()","ipv6_saddr=()","ipv6_src()","ipv6_src()","ipv6_src=()","ipv6_src=()","ipv6_src_readable()","ipv6_src_readable()","ipv6_v()","ipv6_v()","ipv6_v=()","ipv6_v=()","kind=()","kind_of?()","layer()","layer()","layer()","layer_symbol()","layer_symbol()","len()","len()","len=()","length()","lookupdev()","mac2str()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","newer_than?()","next()","o1()","o2()","o3()","o4()","octet_array()","octets()","older_than?()","optlen=()","optlen=()","orig_kind_of?()","packet_classes()","packet_prefixes()","packetfu_ascii_art()","parse()","parse()","payload()","payload=()","pcaprub_loaded?()","pcaprub_platform_require()","peek()","peek()","peek_format()","peek_format()","peek_format()","peek_format()","peek_format()","peek_format()","peek_format()","print_results()","proto()","protocol()","psh=()","rand_port()","rand_source_ip()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read!()","read_packet_bytes()","read_packet_bytes()","read_packets()","read_packets()","read_quad()","read_x()","readfile()","recalc()","recalc()","recalc()","remove_packet_class()","require_protos()","respond_to?()","rst=()","save()","set_byte_order()","set_endianness()","setup_params()","show_live()","size()","sniff()","start()","str2mac()","string=()","syn=()","sz()","tcp_ack()","tcp_ack()","tcp_ack=()","tcp_ack=()","tcp_ack_readable()","tcp_ack_readable()","tcp_calc_flavor()","tcp_calc_hlen()","tcp_calc_hlen()","tcp_calc_seq()","tcp_calc_seq()","tcp_calc_src()","tcp_calc_src()","tcp_calc_sum()","tcp_dport()","tcp_dport()","tcp_dport=()","tcp_dport=()","tcp_dst()","tcp_dst()","tcp_dst=()","tcp_dst=()","tcp_ecn()","tcp_ecn()","tcp_ecn=()","tcp_ecn=()","tcp_flags()","tcp_flags=()","tcp_flags_dotmap()","tcp_flags_dotmap()","tcp_flags_readable()","tcp_flags_readable()","tcp_hlen()","tcp_hlen()","tcp_hlen=()","tcp_hlen=()","tcp_options()","tcp_options()","tcp_options=()","tcp_options=()","tcp_opts()","tcp_opts()","tcp_opts=()","tcp_opts=()","tcp_opts_len()","tcp_opts_len()","tcp_opts_readable()","tcp_opts_readable()","tcp_recalc()","tcp_recalc()","tcp_recalc()","tcp_reserved()","tcp_reserved()","tcp_reserved=()","tcp_reserved=()","tcp_seq()","tcp_seq()","tcp_seq=()","tcp_seq=()","tcp_seq_readable()","tcp_seq_readable()","tcp_sport()","tcp_sport()","tcp_sport=()","tcp_sport=()","tcp_src()","tcp_src()","tcp_src=()","tcp_src=()","tcp_sum()","tcp_sum()","tcp_sum=()","tcp_sum=()","tcp_sum_readable()","tcp_sum_readable()","tcp_urg()","tcp_urg()","tcp_urg=()","tcp_urg=()","tcp_win()","tcp_win()","tcp_win=()","tcp_win=()","to_f()","to_f()","to_f()","to_file()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_pcap()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_w()","to_x()","to_x()","toggle_inspect()","typecast()","udp_calc_len()","udp_calc_len()","udp_calc_sum()","udp_dport()","udp_dport()","udp_dport=()","udp_dport=()","udp_dst()","udp_dst()","udp_dst=()","udp_dst=()","udp_len()","udp_len()","udp_len=()","udp_len=()","udp_recalc()","udp_recalc()","udp_recalc()","udp_sport()","udp_sport()","udp_sport=()","udp_sport=()","udp_src()","udp_src()","udp_src=()","udp_src=()","udp_sum()","udp_sum()","udp_sum=()","udp_sum=()","udp_sum_readable()","udp_sum_readable()","urg=()","usage()","value=()","value=()","value=()","value=()","version()","w2a()","whoami?()","whoami?()","wire_to_array()","write()","write()","zero_or_one()","install","license","readme"],"longSearchIndex":["object","packetfu","packetfu::arpheader","packetfu::arpheadermixin","packetfu::arppacket","packetfu::addripv6","packetfu::capture","packetfu::config","packetfu::ethheader","packetfu::ethheadermixin","packetfu::ethmac","packetfu::ethnic","packetfu::ethoui","packetfu::ethpacket","packetfu::hsrpheader","packetfu::hsrpheadermixin","packetfu::hsrppacket","packetfu::icmpheader","packetfu::icmpheadermixin","packetfu::icmppacket","packetfu::ipheader","packetfu::ipheadermixin","packetfu::ippacket","packetfu::ipv6header","packetfu::ipv6headermixin","packetfu::ipv6packet","packetfu::inject","packetfu::invalidheader","packetfu::invalidpacket","packetfu::octets","packetfu::packet","packetfu::pcapfile","packetfu::pcapheader","packetfu::pcappacket","packetfu::pcappackets","packetfu::read","packetfu::tcpheader","packetfu::tcpheadermixin","packetfu::tcppacket","packetfu::tcpecn","packetfu::tcpflags","packetfu::tcphlen","packetfu::tcpoption","packetfu::tcpoption::echo","packetfu::tcpoption::echoreply","packetfu::tcpoption::eol","packetfu::tcpoption::mss","packetfu::tcpoption::nop","packetfu::tcpoption::sack","packetfu::tcpoption::sackok","packetfu::tcpoption::ts","packetfu::tcpoption::ws","packetfu::tcpoptions","packetfu::tcpreserved","packetfu::timestamp","packetfu::udpheader","packetfu::udpheadermixin","packetfu::udppacket","packetfu::utils","packetfu::write","struct","structfu","structfu::int","structfu::int16","structfu::int16be","structfu::int16le","structfu::int32","structfu::int32be","structfu::int32le","structfu::int8","structfu::intstring","structfu::string","packetfu::packet#==()","packetfu::pcapfile#a2f()","packetfu::write::a2f()","packetfu::pcapfile#a2f!()","packetfu::inject#a2w()","packetfu::tcpflags#ack=()","packetfu::add_packet_class()","packetfu::pcapfile#append()","packetfu::write::append()","object#arp()","packetfu#arp()","packetfu::utils::arp()","packetfu::arpheader#arp_daddr_ip()","packetfu::arpheadermixin#arp_daddr_ip()","packetfu::arpheader#arp_daddr_ip=()","packetfu::arpheadermixin#arp_daddr_ip=()","packetfu::arpheader#arp_daddr_mac()","packetfu::arpheadermixin#arp_daddr_mac()","packetfu::arpheader#arp_daddr_mac=()","packetfu::arpheadermixin#arp_daddr_mac=()","packetfu::arpheader#arp_dst_ip()","packetfu::arpheadermixin#arp_dst_ip()","packetfu::arpheader#arp_dst_ip=()","packetfu::arpheadermixin#arp_dst_ip=()","packetfu::arpheader#arp_dst_ip_readable()","packetfu::arpheadermixin#arp_dst_ip_readable()","packetfu::arpheader#arp_dst_mac()","packetfu::arpheadermixin#arp_dst_mac()","packetfu::arpheader#arp_dst_mac=()","packetfu::arpheadermixin#arp_dst_mac=()","packetfu::arpheader#arp_dst_mac_readable()","packetfu::arpheadermixin#arp_dst_mac_readable()","object#arp_everyone()","packetfu::arpheader#arp_hw()","packetfu::arpheadermixin#arp_hw()","packetfu::arpheader#arp_hw=()","packetfu::arpheadermixin#arp_hw=()","packetfu::arpheader#arp_hw_len()","packetfu::arpheadermixin#arp_hw_len()","packetfu::arpheader#arp_hw_len=()","packetfu::arpheadermixin#arp_hw_len=()","packetfu::arpheader#arp_opcode()","packetfu::arpheadermixin#arp_opcode()","packetfu::arpheader#arp_opcode=()","packetfu::arpheadermixin#arp_opcode=()","packetfu::arpheader#arp_proto()","packetfu::arpheadermixin#arp_proto()","packetfu::arpheader#arp_proto=()","packetfu::arpheadermixin#arp_proto=()","packetfu::arpheader#arp_proto_len()","packetfu::arpheadermixin#arp_proto_len()","packetfu::arpheader#arp_proto_len=()","packetfu::arpheadermixin#arp_proto_len=()","packetfu::arpheader#arp_proto_readable()","packetfu::arpheadermixin#arp_proto_readable()","packetfu::arpheader#arp_saddr_ip()","packetfu::arpheadermixin#arp_saddr_ip()","packetfu::arpheader#arp_saddr_ip=()","packetfu::arpheadermixin#arp_saddr_ip=()","packetfu::arpheader#arp_saddr_mac()","packetfu::arpheadermixin#arp_saddr_mac()","packetfu::arpheader#arp_saddr_mac=()","packetfu::arpheadermixin#arp_saddr_mac=()","packetfu::arpheader#arp_src_ip()","packetfu::arpheadermixin#arp_src_ip()","packetfu::arpheader#arp_src_ip=()","packetfu::arpheadermixin#arp_src_ip=()","packetfu::arpheader#arp_src_ip_readable()","packetfu::arpheadermixin#arp_src_ip_readable()","packetfu::arpheader#arp_src_mac()","packetfu::arpheadermixin#arp_src_mac()","packetfu::arpheader#arp_src_mac=()","packetfu::arpheadermixin#arp_src_mac=()","packetfu::arpheader#arp_src_mac_readable()","packetfu::arpheadermixin#arp_src_mac_readable()","packetfu::pcapfile#array_to_file()","packetfu::write::array_to_file()","packetfu::pcapfile#array_to_file!()","packetfu::inject#array_to_wire()","packetfu::at_least?()","object#banner()","packetfu::binarize_version()","packetfu::tcpheader#bits_to_s()","structfu#body=()","packetfu::capture#bpf()","object#build_oui_list()","structfu::intstring#calc()","packetfu::arppacket::can_parse?()","packetfu::ethpacket::can_parse?()","packetfu::hsrppacket::can_parse?()","packetfu::icmppacket::can_parse?()","packetfu::ippacket::can_parse?()","packetfu::ipv6packet::can_parse?()","packetfu::invalidpacket::can_parse?()","packetfu::packet::can_parse?()","packetfu::tcppacket::can_parse?()","packetfu::udppacket::can_parse?()","packetfu::capture#capture()","packetfu::classes()","packetfu::capture#clear()","packetfu::pcapfile#clear()","packetfu::packet#clone()","structfu#clone()","packetfu::config#config()","object#count_packet_types()","packetfu::tcpoption#decode()","packetfu::tcpoption::echo#decode()","packetfu::tcpoption::echoreply#decode()","packetfu::tcpoption::eol#decode()","packetfu::tcpoption::mss#decode()","packetfu::tcpoption::nop#decode()","packetfu::tcpoption::sack#decode()","packetfu::tcpoption::sackok#decode()","packetfu::tcpoption::ts#decode()","packetfu::tcpoption::ws#decode()","packetfu::tcpoptions#decode()","packetfu::packet#dissect()","packetfu::packet#dissection_table()","object#do_scan()","packetfu::tcpoption#encode()","packetfu::tcpoption::sack#encode()","packetfu::tcpoption::ts#encode()","packetfu::tcpoptions#encode()","packetfu::tcpoptions#encode!()","packetfu::ethheader#eth_daddr()","packetfu::ethheadermixin#eth_daddr()","packetfu::ethheader#eth_daddr=()","packetfu::ethheadermixin#eth_daddr=()","packetfu::ethheader#eth_dst()","packetfu::ethheadermixin#eth_dst()","packetfu::ethheader#eth_dst=()","packetfu::ethheadermixin#eth_dst=()","packetfu::ethheader#eth_dst_readable()","packetfu::ethheadermixin#eth_dst_readable()","packetfu::ethheader#eth_proto()","packetfu::ethheadermixin#eth_proto()","packetfu::ethheader#eth_proto=()","packetfu::ethheadermixin#eth_proto=()","packetfu::ethheader#eth_proto_readable()","packetfu::ethheadermixin#eth_proto_readable()","packetfu::ethheader#eth_saddr()","packetfu::ethheadermixin#eth_saddr()","packetfu::ethheader#eth_saddr=()","packetfu::ethheadermixin#eth_saddr=()","packetfu::ethheader#eth_src()","packetfu::ethheadermixin#eth_src()","packetfu::ethheader#eth_src=()","packetfu::ethheadermixin#eth_src=()","packetfu::ethheader#eth_src_readable()","packetfu::ethheadermixin#eth_src_readable()","packetfu::pcapfile#f2a()","packetfu::read::f2a()","packetfu::pcapfile#file_to_array()","packetfu::pcapfile::file_to_array()","packetfu::read::file_to_array()","packetfu::tcpflags#fin=()","packetfu::force_binary()","packetfu::packet::force_binary()","packetfu::pcappackets#force_binary()","struct#force_binary()","packetfu::write::format_packets()","object#gen_packets()","packetfu::read::get_byte_order()","packetfu::packet#handle_is_identity()","packetfu::tcpoption#has_optlen?()","packetfu::tcpoption#has_value?()","packetfu::packet#hexify()","packetfu::hsrpheader#hsrp_addr()","packetfu::hsrpheadermixin#hsrp_addr()","packetfu::hsrpheader#hsrp_addr=()","packetfu::hsrpheadermixin#hsrp_addr=()","packetfu::hsrpheader#hsrp_group()","packetfu::hsrpheadermixin#hsrp_group()","packetfu::hsrpheader#hsrp_group=()","packetfu::hsrpheadermixin#hsrp_group=()","packetfu::hsrpheader#hsrp_hellotime()","packetfu::hsrpheadermixin#hsrp_hellotime()","packetfu::hsrpheader#hsrp_hellotime=()","packetfu::hsrpheadermixin#hsrp_hellotime=()","packetfu::hsrpheader#hsrp_holdtime()","packetfu::hsrpheadermixin#hsrp_holdtime()","packetfu::hsrpheader#hsrp_holdtime=()","packetfu::hsrpheadermixin#hsrp_holdtime=()","packetfu::hsrpheader#hsrp_opcode()","packetfu::hsrpheadermixin#hsrp_opcode()","packetfu::hsrpheader#hsrp_opcode=()","packetfu::hsrpheadermixin#hsrp_opcode=()","packetfu::hsrpheadermixin#hsrp_password()","packetfu::hsrpheadermixin#hsrp_password=()","packetfu::hsrpheader#hsrp_password_readable()","packetfu::hsrpheadermixin#hsrp_password_readable()","packetfu::hsrpheader#hsrp_priority()","packetfu::hsrpheadermixin#hsrp_priority()","packetfu::hsrpheader#hsrp_priority=()","packetfu::hsrpheadermixin#hsrp_priority=()","packetfu::hsrpheader#hsrp_reserved()","packetfu::hsrpheadermixin#hsrp_reserved()","packetfu::hsrpheader#hsrp_reserved=()","packetfu::hsrpheadermixin#hsrp_reserved=()","packetfu::hsrpheader#hsrp_state()","packetfu::hsrpheadermixin#hsrp_state()","packetfu::hsrpheader#hsrp_state=()","packetfu::hsrpheadermixin#hsrp_state=()","packetfu::hsrpheader#hsrp_version()","packetfu::hsrpheadermixin#hsrp_version()","packetfu::hsrpheader#hsrp_version=()","packetfu::hsrpheadermixin#hsrp_version=()","packetfu::hsrpheadermixin#hsrp_vip()","packetfu::hsrpheadermixin#hsrp_vip=()","packetfu::hsrpheader#hsrp_vip_readable()","packetfu::hsrpheadermixin#hsrp_vip_readable()","packetfu::icmpheader#icmp_calc_sum()","packetfu::icmpheadermixin#icmp_calc_sum()","packetfu::icmpheader#icmp_code()","packetfu::icmpheadermixin#icmp_code()","packetfu::icmpheader#icmp_code=()","packetfu::icmpheadermixin#icmp_code=()","packetfu::icmpheader#icmp_recalc()","packetfu::icmpheadermixin#icmp_recalc()","packetfu::icmpheader#icmp_sum()","packetfu::icmpheadermixin#icmp_sum()","packetfu::icmpheader#icmp_sum=()","packetfu::icmpheadermixin#icmp_sum=()","packetfu::icmpheader#icmp_sum_readable()","packetfu::icmpheadermixin#icmp_sum_readable()","packetfu::icmpheader#icmp_type()","packetfu::icmpheadermixin#icmp_type()","packetfu::icmpheader#icmp_type=()","packetfu::icmpheadermixin#icmp_type=()","packetfu::utils::ifconfig()","packetfu::packet::inherited()","packetfu::pcapfile#init_fields()","packetfu::pcapheader#init_fields()","packetfu::pcappacket#init_fields()","packetfu::timestamp#init_fields()","packetfu::inject#inject()","packetfu::packet#inspect()","packetfu::packet#inspect_hex()","packetfu::inspect_style()","packetfu::inspect_style=()","packetfu::packet#inspect_style=()","packetfu::ipheader#ip_calc_id()","packetfu::ipheadermixin#ip_calc_id()","packetfu::ipheader#ip_calc_len()","packetfu::ipheadermixin#ip_calc_len()","packetfu::ipheader#ip_calc_sum()","packetfu::ipheadermixin#ip_calc_sum()","packetfu::ipheader#ip_daddr()","packetfu::ipheadermixin#ip_daddr()","packetfu::ipheader#ip_daddr=()","packetfu::ipheadermixin#ip_daddr=()","packetfu::ipheader#ip_dst()","packetfu::ipheadermixin#ip_dst()","packetfu::ipheader#ip_dst=()","packetfu::ipheadermixin#ip_dst=()","packetfu::ipheader#ip_dst_readable()","packetfu::ipheadermixin#ip_dst_readable()","packetfu::ipheader#ip_frag()","packetfu::ipheadermixin#ip_frag()","packetfu::ipheader#ip_frag=()","packetfu::ipheadermixin#ip_frag=()","packetfu::ipheader#ip_hl()","packetfu::ipheadermixin#ip_hl()","packetfu::ipheader#ip_hl=()","packetfu::ipheadermixin#ip_hl=()","packetfu::ipheader#ip_hlen()","packetfu::ipheadermixin#ip_hlen()","packetfu::ipheader#ip_id()","packetfu::ipheadermixin#ip_id()","packetfu::ipheader#ip_id=()","packetfu::ipheadermixin#ip_id=()","packetfu::ipheader#ip_id_readable()","packetfu::ipheadermixin#ip_id_readable()","packetfu::ipheader#ip_len()","packetfu::ipheadermixin#ip_len()","packetfu::ipheader#ip_len=()","packetfu::ipheadermixin#ip_len=()","packetfu::ipheader#ip_proto()","packetfu::ipheadermixin#ip_proto()","packetfu::ipheader#ip_proto=()","packetfu::ipheadermixin#ip_proto=()","packetfu::ipheader#ip_recalc()","packetfu::ipheadermixin#ip_recalc()","packetfu::ipheader#ip_saddr()","packetfu::ipheadermixin#ip_saddr()","packetfu::ipheader#ip_saddr=()","packetfu::ipheadermixin#ip_saddr=()","packetfu::ipheader#ip_src()","packetfu::ipheadermixin#ip_src()","packetfu::ipheader#ip_src=()","packetfu::ipheadermixin#ip_src=()","packetfu::ipheader#ip_src_readable()","packetfu::ipheadermixin#ip_src_readable()","packetfu::ipheader#ip_sum()","packetfu::ipheadermixin#ip_sum()","packetfu::ipheader#ip_sum=()","packetfu::ipheadermixin#ip_sum=()","packetfu::ipheader#ip_sum_readable()","packetfu::ipheadermixin#ip_sum_readable()","packetfu::ipheader#ip_tos()","packetfu::ipheadermixin#ip_tos()","packetfu::ipheader#ip_tos=()","packetfu::ipheadermixin#ip_tos=()","packetfu::ipheader#ip_ttl()","packetfu::ipheadermixin#ip_ttl()","packetfu::ipheader#ip_ttl=()","packetfu::ipheadermixin#ip_ttl=()","packetfu::ipheader#ip_v()","packetfu::ipheadermixin#ip_v()","packetfu::ipheader#ip_v=()","packetfu::ipheadermixin#ip_v=()","packetfu::ipv6header#ipv6_calc_len()","packetfu::ipv6headermixin#ipv6_calc_len()","packetfu::ipv6header#ipv6_class()","packetfu::ipv6headermixin#ipv6_class()","packetfu::ipv6header#ipv6_class=()","packetfu::ipv6headermixin#ipv6_class=()","packetfu::ipv6header#ipv6_daddr()","packetfu::ipv6headermixin#ipv6_daddr()","packetfu::ipv6header#ipv6_daddr=()","packetfu::ipv6headermixin#ipv6_daddr=()","packetfu::ipv6header#ipv6_dst()","packetfu::ipv6headermixin#ipv6_dst()","packetfu::ipv6header#ipv6_dst=()","packetfu::ipv6headermixin#ipv6_dst=()","packetfu::ipv6header#ipv6_dst_readable()","packetfu::ipv6headermixin#ipv6_dst_readable()","packetfu::ipv6header#ipv6_hop()","packetfu::ipv6headermixin#ipv6_hop()","packetfu::ipv6header#ipv6_hop=()","packetfu::ipv6headermixin#ipv6_hop=()","packetfu::ipv6header#ipv6_label()","packetfu::ipv6headermixin#ipv6_label()","packetfu::ipv6header#ipv6_label=()","packetfu::ipv6headermixin#ipv6_label=()","packetfu::ipv6header#ipv6_len()","packetfu::ipv6headermixin#ipv6_len()","packetfu::ipv6header#ipv6_len=()","packetfu::ipv6headermixin#ipv6_len=()","packetfu::ipv6header#ipv6_next()","packetfu::ipv6headermixin#ipv6_next()","packetfu::ipv6header#ipv6_next=()","packetfu::ipv6headermixin#ipv6_next=()","packetfu::ipv6header#ipv6_recalc()","packetfu::ipv6headermixin#ipv6_recalc()","packetfu::ipv6header#ipv6_saddr()","packetfu::ipv6headermixin#ipv6_saddr()","packetfu::ipv6header#ipv6_saddr=()","packetfu::ipv6headermixin#ipv6_saddr=()","packetfu::ipv6header#ipv6_src()","packetfu::ipv6headermixin#ipv6_src()","packetfu::ipv6header#ipv6_src=()","packetfu::ipv6headermixin#ipv6_src=()","packetfu::ipv6header#ipv6_src_readable()","packetfu::ipv6headermixin#ipv6_src_readable()","packetfu::ipv6header#ipv6_v()","packetfu::ipv6headermixin#ipv6_v()","packetfu::ipv6header#ipv6_v=()","packetfu::ipv6headermixin#ipv6_v=()","packetfu::tcpoption#kind=()","packetfu::packet#kind_of?()","packetfu::invalidpacket::layer()","packetfu::packet::layer()","packetfu::packet#layer()","packetfu::packet#layer_symbol()","packetfu::packet::layer_symbol()","structfu#len()","structfu::intstring#len()","structfu::intstring#len=()","packetfu::packet#length()","packetfu::utils::lookupdev()","packetfu::ethheader::mac2str()","packetfu::packet#method_missing()","packetfu::arpheader::new()","packetfu::arppacket::new()","packetfu::addripv6::new()","packetfu::capture::new()","packetfu::config::new()","packetfu::ethheader::new()","packetfu::ethmac::new()","packetfu::ethnic::new()","packetfu::ethoui::new()","packetfu::ethpacket::new()","packetfu::hsrpheader::new()","packetfu::hsrppacket::new()","packetfu::icmpheader::new()","packetfu::icmppacket::new()","packetfu::ipheader::new()","packetfu::ippacket::new()","packetfu::ipv6header::new()","packetfu::ipv6packet::new()","packetfu::inject::new()","packetfu::invalidheader::new()","packetfu::invalidpacket::new()","packetfu::octets::new()","packetfu::packet::new()","packetfu::pcapfile::new()","packetfu::pcapheader::new()","packetfu::pcappacket::new()","packetfu::pcappackets::new()","packetfu::tcpheader::new()","packetfu::tcppacket::new()","packetfu::tcpecn::new()","packetfu::tcpflags::new()","packetfu::tcphlen::new()","packetfu::tcpoption::new()","packetfu::tcpoption::echo::new()","packetfu::tcpoption::echoreply::new()","packetfu::tcpoption::eol::new()","packetfu::tcpoption::mss::new()","packetfu::tcpoption::nop::new()","packetfu::tcpoption::sack::new()","packetfu::tcpoption::sackok::new()","packetfu::tcpoption::ts::new()","packetfu::tcpoption::ws::new()","packetfu::tcpreserved::new()","packetfu::timestamp::new()","packetfu::udpheader::new()","packetfu::udppacket::new()","structfu::int::new()","structfu::int16::new()","structfu::int16le::new()","structfu::int32::new()","structfu::int32le::new()","structfu::int8::new()","structfu::intstring::new()","packetfu::newer_than?()","packetfu::capture#next()","packetfu::octets#o1()","packetfu::octets#o2()","packetfu::octets#o3()","packetfu::octets#o4()","packetfu::ipheader::octet_array()","packetfu::octets#octets()","packetfu::older_than?()","packetfu::tcpoption#optlen=()","packetfu::tcpoption::sack#optlen=()","packetfu::packet#orig_kind_of?()","packetfu::packet_classes()","packetfu::packet_prefixes()","object#packetfu_ascii_art()","packetfu::packet::parse()","structfu::intstring#parse()","packetfu::packet#payload()","packetfu::packet#payload=()","packetfu::pcaprub_loaded?()","packetfu::pcaprub_platform_require()","packetfu::ipv6packet#peek()","packetfu::packet#peek()","packetfu::arppacket#peek_format()","packetfu::hsrppacket#peek_format()","packetfu::icmppacket#peek_format()","packetfu::ippacket#peek_format()","packetfu::packet#peek_format()","packetfu::tcppacket#peek_format()","packetfu::udppacket#peek_format()","object#print_results()","packetfu::packet#proto()","packetfu::packet#protocol()","packetfu::tcpflags#psh=()","packetfu::tcpheader#rand_port()","object#rand_source_ip()","packetfu::arpheader#read()","packetfu::arppacket#read()","packetfu::addripv6#read()","packetfu::ethheader#read()","packetfu::ethmac#read()","packetfu::ethnic#read()","packetfu::ethoui#read()","packetfu::ethpacket#read()","packetfu::hsrpheader#read()","packetfu::hsrppacket#read()","packetfu::icmpheader#read()","packetfu::icmppacket#read()","packetfu::ipheader#read()","packetfu::ippacket#read()","packetfu::ipv6header#read()","packetfu::ipv6packet#read()","packetfu::invalidheader#read()","packetfu::invalidpacket#read()","packetfu::octets#read()","packetfu::packet#read()","packetfu::pcapfile#read()","packetfu::pcapfile::read()","packetfu::pcapheader#read()","packetfu::pcappacket#read()","packetfu::pcappackets#read()","packetfu::tcpheader#read()","packetfu::tcppacket#read()","packetfu::tcpecn#read()","packetfu::tcpflags#read()","packetfu::tcphlen#read()","packetfu::tcpoption#read()","packetfu::tcpoptions#read()","packetfu::tcpreserved#read()","packetfu::timestamp#read()","packetfu::udpheader#read()","packetfu::udppacket#read()","structfu::int#read()","structfu::intstring#read()","structfu::string#read()","packetfu::pcapfile#read!()","packetfu::pcapfile::read_packet_bytes()","packetfu::pcapfile#read_packet_bytes()","packetfu::pcapfile#read_packets()","packetfu::pcapfile::read_packets()","packetfu::octets#read_quad()","packetfu::addripv6#read_x()","packetfu::pcapfile#readfile()","packetfu::arppacket#recalc()","packetfu::ethpacket#recalc()","packetfu::packet#recalc()","packetfu::remove_packet_class()","packetfu::require_protos()","packetfu::packet#respond_to?()","packetfu::tcpflags#rst=()","packetfu::capture#save()","packetfu::read::set_byte_order()","structfu#set_endianness()","packetfu::capture#setup_params()","packetfu::capture#show_live()","packetfu::packet#size()","object#sniff()","packetfu::capture#start()","packetfu::ethheader::str2mac()","structfu::intstring#string=()","packetfu::tcpflags#syn=()","structfu#sz()","packetfu::tcpheader#tcp_ack()","packetfu::tcpheadermixin#tcp_ack()","packetfu::tcpheader#tcp_ack=()","packetfu::tcpheadermixin#tcp_ack=()","packetfu::tcpheader#tcp_ack_readable()","packetfu::tcpheadermixin#tcp_ack_readable()","packetfu::tcppacket#tcp_calc_flavor()","packetfu::tcpheader#tcp_calc_hlen()","packetfu::tcpheadermixin#tcp_calc_hlen()","packetfu::tcpheader#tcp_calc_seq()","packetfu::tcpheadermixin#tcp_calc_seq()","packetfu::tcpheader#tcp_calc_src()","packetfu::tcpheadermixin#tcp_calc_src()","packetfu::tcppacket#tcp_calc_sum()","packetfu::tcpheader#tcp_dport()","packetfu::tcpheadermixin#tcp_dport()","packetfu::tcpheader#tcp_dport=()","packetfu::tcpheadermixin#tcp_dport=()","packetfu::tcpheader#tcp_dst()","packetfu::tcpheadermixin#tcp_dst()","packetfu::tcpheader#tcp_dst=()","packetfu::tcpheadermixin#tcp_dst=()","packetfu::tcpheader#tcp_ecn()","packetfu::tcpheadermixin#tcp_ecn()","packetfu::tcpheader#tcp_ecn=()","packetfu::tcpheadermixin#tcp_ecn=()","packetfu::tcpheadermixin#tcp_flags()","packetfu::tcpheadermixin#tcp_flags=()","packetfu::tcpheader#tcp_flags_dotmap()","packetfu::tcpheadermixin#tcp_flags_dotmap()","packetfu::tcpheader#tcp_flags_readable()","packetfu::tcpheadermixin#tcp_flags_readable()","packetfu::tcpheader#tcp_hlen()","packetfu::tcpheadermixin#tcp_hlen()","packetfu::tcpheader#tcp_hlen=()","packetfu::tcpheadermixin#tcp_hlen=()","packetfu::tcpheader#tcp_options()","packetfu::tcpheadermixin#tcp_options()","packetfu::tcpheader#tcp_options=()","packetfu::tcpheadermixin#tcp_options=()","packetfu::tcpheader#tcp_opts()","packetfu::tcpheadermixin#tcp_opts()","packetfu::tcpheader#tcp_opts=()","packetfu::tcpheadermixin#tcp_opts=()","packetfu::tcpheader#tcp_opts_len()","packetfu::tcpheadermixin#tcp_opts_len()","packetfu::tcpheader#tcp_opts_readable()","packetfu::tcpheadermixin#tcp_opts_readable()","packetfu::tcpheader#tcp_recalc()","packetfu::tcpheadermixin#tcp_recalc()","packetfu::tcppacket#tcp_recalc()","packetfu::tcpheader#tcp_reserved()","packetfu::tcpheadermixin#tcp_reserved()","packetfu::tcpheader#tcp_reserved=()","packetfu::tcpheadermixin#tcp_reserved=()","packetfu::tcpheader#tcp_seq()","packetfu::tcpheadermixin#tcp_seq()","packetfu::tcpheader#tcp_seq=()","packetfu::tcpheadermixin#tcp_seq=()","packetfu::tcpheader#tcp_seq_readable()","packetfu::tcpheadermixin#tcp_seq_readable()","packetfu::tcpheader#tcp_sport()","packetfu::tcpheadermixin#tcp_sport()","packetfu::tcpheader#tcp_sport=()","packetfu::tcpheadermixin#tcp_sport=()","packetfu::tcpheader#tcp_src()","packetfu::tcpheadermixin#tcp_src()","packetfu::tcpheader#tcp_src=()","packetfu::tcpheadermixin#tcp_src=()","packetfu::tcpheader#tcp_sum()","packetfu::tcpheadermixin#tcp_sum()","packetfu::tcpheader#tcp_sum=()","packetfu::tcpheadermixin#tcp_sum=()","packetfu::tcpheader#tcp_sum_readable()","packetfu::tcpheadermixin#tcp_sum_readable()","packetfu::tcpheader#tcp_urg()","packetfu::tcpheadermixin#tcp_urg()","packetfu::tcpheader#tcp_urg=()","packetfu::tcpheadermixin#tcp_urg=()","packetfu::tcpheader#tcp_win()","packetfu::tcpheadermixin#tcp_win()","packetfu::tcpheader#tcp_win=()","packetfu::tcpheadermixin#tcp_win=()","packetfu::packet#to_f()","packetfu::pcapfile#to_f()","structfu::int#to_f()","packetfu::pcapfile#to_file()","packetfu::addripv6#to_i()","packetfu::octets#to_i()","packetfu::tcpecn#to_i()","packetfu::tcpflags#to_i()","packetfu::tcphlen#to_i()","packetfu::tcpreserved#to_i()","structfu::int#to_i()","packetfu::packet#to_pcap()","packetfu::arpheader#to_s()","packetfu::addripv6#to_s()","packetfu::ethheader#to_s()","packetfu::ethmac#to_s()","packetfu::ethnic#to_s()","packetfu::ethoui#to_s()","packetfu::hsrpheader#to_s()","packetfu::icmpheader#to_s()","packetfu::ipheader#to_s()","packetfu::ipv6header#to_s()","packetfu::invalidheader#to_s()","packetfu::octets#to_s()","packetfu::packet#to_s()","packetfu::pcapfile#to_s()","packetfu::pcapheader#to_s()","packetfu::pcappacket#to_s()","packetfu::pcappackets#to_s()","packetfu::tcpheader#to_s()","packetfu::tcphlen#to_s()","packetfu::tcpoption#to_s()","packetfu::tcpoptions#to_s()","packetfu::timestamp#to_s()","packetfu::udpheader#to_s()","structfu::int#to_s()","structfu::int16#to_s()","structfu::int32#to_s()","structfu::int8#to_s()","structfu::intstring#to_s()","packetfu::packet#to_w()","packetfu::addripv6#to_x()","packetfu::octets#to_x()","packetfu#toggle_inspect()","structfu#typecast()","packetfu::udpheader#udp_calc_len()","packetfu::udpheadermixin#udp_calc_len()","packetfu::udppacket#udp_calc_sum()","packetfu::udpheader#udp_dport()","packetfu::udpheadermixin#udp_dport()","packetfu::udpheader#udp_dport=()","packetfu::udpheadermixin#udp_dport=()","packetfu::udpheader#udp_dst()","packetfu::udpheadermixin#udp_dst()","packetfu::udpheader#udp_dst=()","packetfu::udpheadermixin#udp_dst=()","packetfu::udpheader#udp_len()","packetfu::udpheadermixin#udp_len()","packetfu::udpheader#udp_len=()","packetfu::udpheadermixin#udp_len=()","packetfu::udpheader#udp_recalc()","packetfu::udpheadermixin#udp_recalc()","packetfu::udppacket#udp_recalc()","packetfu::udpheader#udp_sport()","packetfu::udpheadermixin#udp_sport()","packetfu::udpheader#udp_sport=()","packetfu::udpheadermixin#udp_sport=()","packetfu::udpheader#udp_src()","packetfu::udpheadermixin#udp_src()","packetfu::udpheader#udp_src=()","packetfu::udpheadermixin#udp_src=()","packetfu::udpheader#udp_sum()","packetfu::udpheadermixin#udp_sum()","packetfu::udpheader#udp_sum=()","packetfu::udpheadermixin#udp_sum=()","packetfu::udpheader#udp_sum_readable()","packetfu::udpheadermixin#udp_sum_readable()","packetfu::tcpflags#urg=()","object#usage()","packetfu::tcpoption#value=()","packetfu::tcpoption::mss#value=()","packetfu::tcpoption::sack#value=()","packetfu::tcpoption::ws#value=()","packetfu::version()","packetfu::capture#w2a()","packetfu#whoami?()","packetfu::utils::whoami?()","packetfu::capture#wire_to_array()","packetfu::packet#write()","packetfu::pcapfile#write()","packetfu::tcpflags#zero_or_one()","","",""],"info":[["Object","","classes/Object.html","",""],["PacketFu","","classes/PacketFu.html","",""],["PacketFu::ARPHeader","","classes/PacketFu/ARPHeader.html","","<p>ARPHeader is a complete ARP struct, used in ARPPacket.\n<p>ARP is used to discover the machine address of …\n"],["PacketFu::ARPHeaderMixin","","classes/PacketFu/ARPHeaderMixin.html","","<p>This Mixin simplifies access to the ARPHeaders. Mix this in with your \npacket interface, and it will …\n"],["PacketFu::ARPPacket","","classes/PacketFu/ARPPacket.html","","<p>ARPPacket is used to construct ARP packets. They contain an EthHeader and\nan ARPHeader.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["PacketFu::AddrIpv6","","classes/PacketFu/AddrIpv6.html","","<p>AddrIpv6 handles addressing for IPv6Header\n<p>Header Definition\n\n<pre>Int32 :a1\nInt32 :a2\nInt32 :a3\nInt32 :a4</pre>\n"],["PacketFu::Capture","","classes/PacketFu/Capture.html","","<p>The Capture class is used to construct PcapRub objects in order to collect\npackets from an interface. …\n"],["PacketFu::Config","","classes/PacketFu/Config.html","","<p>The Config class holds various bits of useful default information  for\npacket creation. If initialized …\n"],["PacketFu::EthHeader","","classes/PacketFu/EthHeader.html","","<p>EthHeader is a complete Ethernet struct, used in EthPacket.  It’s the base\nheader for all other protocols, …\n"],["PacketFu::EthHeaderMixin","","classes/PacketFu/EthHeaderMixin.html","","<p>This Mixin simplifies access to the EthHeaders. Mix this in with your \npacket interface, and it will …\n"],["PacketFu::EthMac","","classes/PacketFu/EthMac.html","","<p>EthMac is the combination of an EthOui and EthNic, used in EthHeader.\n<p>Header Definition\n\n<pre>EthOui :oui  # ...</pre>\n"],["PacketFu::EthNic","","classes/PacketFu/EthNic.html","","<p>EthNic is the Network Interface Controler portion of a MAC address, used in\nEthHeader.\n<p>Header Definition …\n"],["PacketFu::EthOui","","classes/PacketFu/EthOui.html","","<p>EthOui is the Organizationally Unique Identifier portion of a MAC address,\nused in EthHeader.\n<p>See the …\n"],["PacketFu::EthPacket","","classes/PacketFu/EthPacket.html","","<p>EthPacket is used to construct Ethernet packets. They contain an Ethernet\nheader, and that’s about it. …\n"],["PacketFu::HSRPHeader","","classes/PacketFu/HSRPHeader.html","","<p>HSRPHeader is a complete HSRP struct, used in HSRPPacket. HSRP is typically\nused for fault-tolerant default …\n"],["PacketFu::HSRPHeaderMixin","","classes/PacketFu/HSRPHeaderMixin.html","","<p>This Mixin simplifies access to the HSRPHeaders. Mix this in with your \npacket interface, and it will …\n"],["PacketFu::HSRPPacket","","classes/PacketFu/HSRPPacket.html","","<p>HSRPPacket is used to construct HSRP Packets. They contain an EthHeader, an\nIPHeader, and a UDPHeader …\n"],["PacketFu::ICMPHeader","","classes/PacketFu/ICMPHeader.html","","<p>ICMPHeader is a complete ICMP struct, used in ICMPPacket. ICMP is \ntypically used for network administration …\n"],["PacketFu::ICMPHeaderMixin","","classes/PacketFu/ICMPHeaderMixin.html","","<p>This Mixin simplifies access to the ICMPHeaders. Mix this in with your \npacket interface, and it will …\n"],["PacketFu::ICMPPacket","","classes/PacketFu/ICMPPacket.html","","<p>ICMPPacket is used to construct ICMP Packets. They contain an EthHeader, an\nIPHeader, and a ICMPHeader …\n"],["PacketFu::IPHeader","","classes/PacketFu/IPHeader.html","","<p>IPHeader is a complete IP struct, used in IPPacket. Most traffic on most\nnetworks today is IP-based. …\n"],["PacketFu::IPHeaderMixin","","classes/PacketFu/IPHeaderMixin.html","","<p>This Mixin simplifies access to the IPHeaders. Mix this in with your \npacket interface, and it will add …\n"],["PacketFu::IPPacket","","classes/PacketFu/IPPacket.html","","<p>IPPacket is used to construct IP packets. They contain an EthHeader, an\nIPHeader, and usually a transport-layer …\n"],["PacketFu::IPv6Header","","classes/PacketFu/IPv6Header.html","","<p>IPv6Header is complete IPv6 struct, used in IPv6Packet.\n<p>Header Definition\n\n<pre>Fixnum (4 bits)   :ipv6_v   ...</pre>\n"],["PacketFu::IPv6HeaderMixin","","classes/PacketFu/IPv6HeaderMixin.html","","<p>This Mixin simplifies access to the IPv6Headers. Mix this in with your \npacket interface, and it will …\n"],["PacketFu::IPv6Packet","","classes/PacketFu/IPv6Packet.html","","<p>IPv6Packet is used to construct IPv6 Packets. They contain an EthHeader and\nan IPv6Header, and in the …\n"],["PacketFu::Inject","","classes/PacketFu/Inject.html","","<p>The Inject class handles injecting arrays of binary data on the wire.\n<p>To inject single packets, use PacketFu::Packet.to_w() …\n"],["PacketFu::InvalidHeader","","classes/PacketFu/InvalidHeader.html","","<p>InvalidHeader catches all packets that we don’t already have a Struct for,\nor for whatever reason, violates …\n"],["PacketFu::InvalidPacket","","classes/PacketFu/InvalidPacket.html","","<p>You probably don’t want to write invalid packets on purpose.\n"],["PacketFu::Octets","","classes/PacketFu/Octets.html","","<p>Octets implements the addressing scheme for IP.\n<p>Header Definition\n\n<pre>Int32 :ip_addr</pre>\n"],["PacketFu::Packet","","classes/PacketFu/Packet.html","","<p>Packet is the parent class of EthPacket, IPPacket, UDPPacket, TCPPacket,\nand all other packets. It acts …\n"],["PacketFu::PcapFile","","classes/PacketFu/PcapFile.html","","<p>PcapFile is a complete libpcap file struct, made up of two elements, a \nPcapHeader and PcapPackets.\n<p>See …\n"],["PacketFu::PcapHeader","","classes/PacketFu/PcapHeader.html","","<p>PcapHeader represents the header portion of a libpcap file (the packets\nthemselves are in the PcapPackets …\n"],["PacketFu::PcapPacket","","classes/PacketFu/PcapPacket.html","","<p>PcapPacket defines how individual packets are stored in a libpcap-formatted\nfile.\n<p>Header Definition\n<p>Timestamp …\n"],["PacketFu::PcapPackets","","classes/PacketFu/PcapPackets.html","","<p>PcapPackets is a collection of PcapPacket objects.\n"],["PacketFu::Read","","classes/PacketFu/Read.html","","<p>Read is largely deprecated. It was current in PacketFu 0.2.0, but isn’t all\nthat useful in 0.3.0 and …\n"],["PacketFu::TCPHeader","","classes/PacketFu/TCPHeader.html","","<p>TCPHeader is a complete TCP struct, used in TCPPacket. Most IP traffic is\nTCP-based, by volume.\n<p>For more …\n"],["PacketFu::TCPHeaderMixin","","classes/PacketFu/TCPHeaderMixin.html","","<p>This Mixin simplifies access to the TCPHeaders. Mix this in with your \npacket interface, and it will …\n"],["PacketFu::TCPPacket","","classes/PacketFu/TCPPacket.html","","<p>TCPPacket is used to construct TCP packets. They contain an EthHeader, an\nIPHeader, and a TCPHeader. …\n"],["PacketFu::TcpEcn","","classes/PacketFu/TcpEcn.html","","<p>Implements the Explict Congestion Notification for TCPHeader.\n<p>Header Definition\n\n<pre>Fixnum (1 bit)  :n\nFixnum ...</pre>\n"],["PacketFu::TcpFlags","","classes/PacketFu/TcpFlags.html","","<p>Implements flags for TCPHeader.\n<p>Header Definition\n\n<pre>Fixnum (1 bit)  :urg\nFixnum (1 bit)  :ack\nFixnum (1 bit) ...</pre>\n"],["PacketFu::TcpHlen","","classes/PacketFu/TcpHlen.html","","<p>Implements the Header Length for TCPHeader.\n<p>Header Definition\n\n<pre>Fixnum (4 bits)  :hlen</pre>\n"],["PacketFu::TcpOption","","classes/PacketFu/TcpOption.html","","<p>TcpOption is the base class for all TCP options. Note that TcpOption#len \nreturns the size of the entire …\n"],["PacketFu::TcpOption::ECHO","","classes/PacketFu/TcpOption/ECHO.html","","<p>Echo option.\n<p>www.networksorcery.com/enp/protocol/tcp/option006.htm\n"],["PacketFu::TcpOption::ECHOREPLY","","classes/PacketFu/TcpOption/ECHOREPLY.html","","<p>Echo Reply option.\n<p>www.networksorcery.com/enp/protocol/tcp/option007.htm\n"],["PacketFu::TcpOption::EOL","","classes/PacketFu/TcpOption/EOL.html","","<p>End of Line option. Usually used to terminate a string of options.\n<p>www.networksorcery.com/enp/protocol/tcp/option000.htm …\n"],["PacketFu::TcpOption::MSS","","classes/PacketFu/TcpOption/MSS.html","","<p>Maximum Segment Size option.\n<p>www.networksorcery.com/enp/protocol/tcp/option002.htm\n"],["PacketFu::TcpOption::NOP","","classes/PacketFu/TcpOption/NOP.html","","<p>No Operation option. Usually used to pad out options to fit a 4-byte\nalignment.\n<p>www.networksorcery.com/enp/protocol/tcp/option001.htm …\n"],["PacketFu::TcpOption::SACK","","classes/PacketFu/TcpOption/SACK.html","","<p>Selective Acknowledgement option.\n<p>www.networksorcery.com/enp/protocol/tcp/option004.htm\n<p>Note that SACK …\n"],["PacketFu::TcpOption::SACKOK","","classes/PacketFu/TcpOption/SACKOK.html","","<p>Selective Acknowlegment OK option.\n<p>www.networksorcery.com/enp/protocol/tcp/option004.htm\n"],["PacketFu::TcpOption::TS","","classes/PacketFu/TcpOption/TS.html","","<p>Timestamp option\n<p>www.networksorcery.com/enp/protocol/tcp/option008.htm\n"],["PacketFu::TcpOption::WS","","classes/PacketFu/TcpOption/WS.html","","<p>Window Size option.\n<p>www.networksorcery.com/enp/protocol/tcp/option003.htm\n"],["PacketFu::TcpOptions","","classes/PacketFu/TcpOptions.html","",""],["PacketFu::TcpReserved","","classes/PacketFu/TcpReserved.html","","<p>Implements the Reserved bits for TCPHeader.\n<p>Header Definition\n\n<pre>Fixnum (1 bit)  :r1\nFixnum (1 bit)  :r2\nFixnum ...</pre>\n"],["PacketFu::Timestamp","","classes/PacketFu/Timestamp.html","","<p>The Timestamp class defines how Timestamps appear in libpcap files.\n<p>Header Definition\n\n<pre>Symbol  :endian  ...</pre>\n"],["PacketFu::UDPHeader","","classes/PacketFu/UDPHeader.html","","<p>UDPHeader is a complete UDP struct, used in UDPPacket. Many\nInternet-critical protocols rely on UDP, …\n"],["PacketFu::UDPHeaderMixin","","classes/PacketFu/UDPHeaderMixin.html","","<p>This Mixin simplifies access to the UDPHeaders. Mix this in with your \npacket interface, and it will …\n"],["PacketFu::UDPPacket","","classes/PacketFu/UDPPacket.html","","<p>UDPPacket is used to construct UDP Packets. They contain an EthHeader, an\nIPHeader, and a UDPHeader. …\n"],["PacketFu::Utils","","classes/PacketFu/Utils.html","","<p>Utils is a collection of various and sundry network utilities that are\nuseful for packet manipulation. …\n"],["PacketFu::Write","","classes/PacketFu/Write.html","","<p>Write is largely deprecated. It was current in PacketFu 0.2.0, but isn’t\nall that useful in 0.3.0 and …\n"],["Struct","","classes/Struct.html","",""],["StructFu","","classes/StructFu.html","","<p>StructFu, a nifty way to leverage Ruby’s built in Struct class to create\nmeaningful binary data.\n"],["StructFu::Int","","classes/StructFu/Int.html","","<p>Ints all have a value, an endianness, and a default value. Note that the\nsignedness of Int values are …\n"],["StructFu::Int16","","classes/StructFu/Int16.html","","<p>Int16 is a two byte value.\n"],["StructFu::Int16be","","classes/StructFu/Int16be.html","","<p>Int16be is a two byte value in big-endian format. The endianness cannot be\naltered.\n"],["StructFu::Int16le","","classes/StructFu/Int16le.html","","<p>Int16le is a two byte value in little-endian format. The endianness cannot\nbe altered.\n"],["StructFu::Int32","","classes/StructFu/Int32.html","","<p>Int32 is a four byte value.\n"],["StructFu::Int32be","","classes/StructFu/Int32be.html","","<p>Int32be is a four byte value in big-endian format. The endianness cannot be\naltered.\n"],["StructFu::Int32le","","classes/StructFu/Int32le.html","","<p>Int32le is a four byte value in little-endian format. The endianness cannot\nbe altered.\n"],["StructFu::Int8","","classes/StructFu/Int8.html","","<p>Int8 is a one byte value.\n"],["StructFu::IntString","","classes/StructFu/IntString.html","","<p>Provides a primitive for creating strings, preceeded by an Int type of\nlength. By default, a string of …\n"],["StructFu::String","","classes/StructFu/String.html","","<p>Strings are just like regular strings, except it comes with a read()\nfunction so that it behaves like …\n"],["==","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-3D-3D","(other)","<p>If two packets are represented as the same binary string, and they’re both\nactually PacketFu packets …\n"],["a2f","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-a2f","(args={})",""],["a2f","PacketFu::Write","classes/PacketFu/Write.html#method-c-a2f","(args={})",""],["a2f!","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-a2f-21","(arr)",""],["a2w","PacketFu::Inject","classes/PacketFu/Inject.html#method-i-a2w","(args={})","<p>Equivalent to array_to_wire\n"],["ack=","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-ack-3D","(i)","<p>Setter for the Acknowlege flag.\n"],["add_packet_class","PacketFu","classes/PacketFu.html#method-c-add_packet_class","(klass)","<p>Adds the class to PacketFu’s list of packet classes – used in packet\nparsing.\n"],["append","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-append","(filename='out.pcap')","<p>Shorthand method for appending to a file. Can take either :file =&gt;\n‘name.pcap’ or simply ‘name.pcap …\n"],["append","PacketFu::Write","classes/PacketFu/Write.html#method-c-append","(args={})","<p>Shorthand method for appending to a file. Also shouldn’t use.\n"],["arp","Object","classes/Object.html#method-i-arp","(target_ip)",""],["arp","PacketFu","classes/PacketFu.html#method-i-arp","(arg)",""],["arp","PacketFu::Utils","classes/PacketFu/Utils.html#method-c-arp","(target_ip,args={})","<p>Returns the MAC address of an IP address, or nil if it’s not responsive to\narp. Takes a dotted-octect …\n"],["arp_daddr_ip","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_daddr_ip","()","<p>Get a more readable destination IP address.\n"],["arp_daddr_ip","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_daddr_ip","()",""],["arp_daddr_ip=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_daddr_ip-3D","(addr)","<p>Set a more readable destination IP address.\n"],["arp_daddr_ip=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_daddr_ip-3D","(v)",""],["arp_daddr_mac","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_daddr_mac","()","<p>Get a more readable source MAC address.\n"],["arp_daddr_mac","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_daddr_mac","()",""],["arp_daddr_mac=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_daddr_mac-3D","(mac)","<p>Set the destination MAC address in a more readable way.\n"],["arp_daddr_mac=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_daddr_mac-3D","(v)",""],["arp_dst_ip","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_dst_ip","()","<p>Getter for the ARP destination IP address.\n"],["arp_dst_ip","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_dst_ip","()",""],["arp_dst_ip=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_dst_ip-3D","(i)","<p>Setter for the ARP destination IP address.\n"],["arp_dst_ip=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_dst_ip-3D","(v)",""],["arp_dst_ip_readable","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_dst_ip_readable","()",""],["arp_dst_ip_readable","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_dst_ip_readable","()",""],["arp_dst_mac","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_dst_mac","()","<p>Setter for the ARP destination MAC address.\n"],["arp_dst_mac","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_dst_mac","()",""],["arp_dst_mac=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_dst_mac-3D","(i)","<p>Setter for the ARP destination MAC address.\n"],["arp_dst_mac=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_dst_mac-3D","(v)",""],["arp_dst_mac_readable","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_dst_mac_readable","()",""],["arp_dst_mac_readable","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_dst_mac_readable","()",""],["arp_everyone","Object","classes/Object.html#method-i-arp_everyone","()",""],["arp_hw","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_hw","()","<p>Getter for the ARP hardware type.\n"],["arp_hw","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_hw","()",""],["arp_hw=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_hw-3D","(i)","<p>Setter for the ARP hardware type.\n"],["arp_hw=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_hw-3D","(v)",""],["arp_hw_len","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_hw_len","()","<p>Getter for the ARP hardware type length.\n"],["arp_hw_len","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_hw_len","()",""],["arp_hw_len=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_hw_len-3D","(i)","<p>Setter for the ARP hardware type length.\n"],["arp_hw_len=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_hw_len-3D","(v)",""],["arp_opcode","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_opcode","()","<p>Getter for the ARP opcode.\n"],["arp_opcode","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_opcode","()",""],["arp_opcode=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_opcode-3D","(i)","<p>Setter for the ARP opcode.\n"],["arp_opcode=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_opcode-3D","(v)",""],["arp_proto","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_proto","()","<p>Getter for the ARP protocol.\n"],["arp_proto","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_proto","()",""],["arp_proto=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_proto-3D","(i)","<p>Setter for the ARP protocol.\n"],["arp_proto=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_proto-3D","(v)",""],["arp_proto_len","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_proto_len","()","<p>Getter for the ARP protocol length.\n"],["arp_proto_len","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_proto_len","()",""],["arp_proto_len=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_proto_len-3D","(i)","<p>Setter for the ARP protocol length.\n"],["arp_proto_len=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_proto_len-3D","(v)",""],["arp_proto_readable","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_proto_readable","()",""],["arp_proto_readable","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_proto_readable","()",""],["arp_saddr_ip","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_saddr_ip","()","<p>Get a more readable source IP address.\n"],["arp_saddr_ip","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_saddr_ip","()",""],["arp_saddr_ip=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_saddr_ip-3D","(addr)","<p>Set a more readable source IP address.\n"],["arp_saddr_ip=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_saddr_ip-3D","(v)",""],["arp_saddr_mac","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_saddr_mac","()","<p>Get a more readable source MAC address.\n"],["arp_saddr_mac","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_saddr_mac","()",""],["arp_saddr_mac=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_saddr_mac-3D","(mac)","<p>Set the source MAC address in a more readable way.\n"],["arp_saddr_mac=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_saddr_mac-3D","(v)",""],["arp_src_ip","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_src_ip","()","<p>Setter for the ARP source IP address.\n"],["arp_src_ip","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_src_ip","()",""],["arp_src_ip=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_src_ip-3D","(i)","<p>Getter for the ARP source IP address.\n"],["arp_src_ip=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_src_ip-3D","(v)",""],["arp_src_ip_readable","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_src_ip_readable","()",""],["arp_src_ip_readable","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_src_ip_readable","()",""],["arp_src_mac","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_src_mac","()","<p>Getter for the ARP source MAC address.\n"],["arp_src_mac","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_src_mac","()",""],["arp_src_mac=","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_src_mac-3D","(i)","<p>Setter for the ARP source MAC address.\n"],["arp_src_mac=","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_src_mac-3D","(v)",""],["arp_src_mac_readable","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-arp_src_mac_readable","()","<p>Readability aliases\n"],["arp_src_mac_readable","PacketFu::ARPHeaderMixin","classes/PacketFu/ARPHeaderMixin.html#method-i-arp_src_mac_readable","()",""],["array_to_file","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-array_to_file","(args={})","<p>Takes an array of packets (as generated by file_to_array), and writes them\nto a file. Valid arguments …\n"],["array_to_file","PacketFu::Write","classes/PacketFu/Write.html#method-c-array_to_file","(args={})","<p>array_to_file is a largely deprecated function for writing arrays of pcaps\nto a file. Use PcapFile#array_to_file …\n"],["array_to_file!","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-array_to_file-21","(arr)","<p>Just like array_to_file, but clears any existing packets from the array\nfirst.\n"],["array_to_wire","PacketFu::Inject","classes/PacketFu/Inject.html#method-i-array_to_wire","(args={})","<p>Takes an array, and injects them onto an interface. Note that complete\npackets (Ethernet headers on down) …\n"],["at_least?","PacketFu","classes/PacketFu.html#method-c-at_least-3F","(str)","<p>Returns true if the version is equal to or greater than the compare\nversion. If the current version of …\n"],["banner","Object","classes/Object.html#method-i-banner","()","<p>Displays a helpful banner.\n"],["binarize_version","PacketFu","classes/PacketFu.html#method-c-binarize_version","(str)","<p>Returns a version string in a binary format for easy comparisons.\n"],["bits_to_s","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-bits_to_s","()","<p>Helper function to create the string for Hlen, Reserved, ECN, and Flags.\n"],["body=","StructFu","classes/StructFu.html#method-i-body-3D","(i)","<p>Used like typecast(), but specifically for casting Strings to\nStructFu::Strings.\n"],["bpf","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-bpf","(args={})","<p>bpf() sets a bpf filter on a capture session. Valid arugments are:\n\n<pre>:filter\n  Provide a bpf filter to enable ...</pre>\n"],["build_oui_list","Object","classes/Object.html#method-i-build_oui_list","()",""],["calc","StructFu::IntString","classes/StructFu/IntString.html#method-i-calc","()","<p>Calculates the size of a string, and sets it as the value.\n"],["can_parse?","PacketFu::ARPPacket","classes/PacketFu/ARPPacket.html#method-c-can_parse-3F","(str)",""],["can_parse?","PacketFu::EthPacket","classes/PacketFu/EthPacket.html#method-c-can_parse-3F","(str)",""],["can_parse?","PacketFu::HSRPPacket","classes/PacketFu/HSRPPacket.html#method-c-can_parse-3F","(str)",""],["can_parse?","PacketFu::ICMPPacket","classes/PacketFu/ICMPPacket.html#method-c-can_parse-3F","(str)",""],["can_parse?","PacketFu::IPPacket","classes/PacketFu/IPPacket.html#method-c-can_parse-3F","(str)",""],["can_parse?","PacketFu::IPv6Packet","classes/PacketFu/IPv6Packet.html#method-c-can_parse-3F","(str)",""],["can_parse?","PacketFu::InvalidPacket","classes/PacketFu/InvalidPacket.html#method-c-can_parse-3F","(str)","<p>Any packet is potentially an invalid packet\n"],["can_parse?","PacketFu::Packet","classes/PacketFu/Packet.html#method-c-can_parse-3F","(str)","<p>Packet subclasses must override this, since the Packet superclass can’t\nactually parse anything.\n"],["can_parse?","PacketFu::TCPPacket","classes/PacketFu/TCPPacket.html#method-c-can_parse-3F","(str)",""],["can_parse?","PacketFu::UDPPacket","classes/PacketFu/UDPPacket.html#method-c-can_parse-3F","(str)",""],["capture","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-capture","(args={})","<p>capture() initializes the @stream varaible. Valid arguments are:\n\n<pre>:filter\n  Provide a bpf filter to enable ...</pre>\n"],["classes","PacketFu","classes/PacketFu.html#method-c-classes","()","<p>Returns an array of classes defined in PacketFu\n"],["clear","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-clear","(args={})","<p>clear() clears the @stream and @array variables, essentially starting the\ncapture session over. Valid …\n"],["clear","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-clear","()","<p>Clears the contents of the PcapFile.\n"],["clone","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-clone","()","<p>Packets are bundles of lots of objects, so copying them is a little\ncomplicated – a dup of a packet …\n"],["clone","StructFu","classes/StructFu.html#method-i-clone","()","<p>Handle deep copies correctly. Marshal in 1.9, re-read myself on 1.8\n"],["config","PacketFu::Config","classes/PacketFu/Config.html#method-i-config","(arg=nil)","<p>Returns all instance variables as a hash (including custom variables set at\ninitialization).\n"],["count_packet_types","Object","classes/Object.html#method-i-count_packet_types","(file)","<p>Takes a file name, parses the packets, and records the packet type based on\nits PacketFu class.\n"],["decode","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-decode","()","<p>The default decode for an unknown option. Known options should redefine\nthis.\n"],["decode","PacketFu::TcpOption::ECHO","classes/PacketFu/TcpOption/ECHO.html#method-i-decode","()","<p>ECHO options with lengths other than 6 are malformed.\n"],["decode","PacketFu::TcpOption::ECHOREPLY","classes/PacketFu/TcpOption/ECHOREPLY.html#method-i-decode","()","<p>ECHOREPLY options with lengths other than 6 are malformed.\n"],["decode","PacketFu::TcpOption::EOL","classes/PacketFu/TcpOption/EOL.html#method-i-decode","()",""],["decode","PacketFu::TcpOption::MSS","classes/PacketFu/TcpOption/MSS.html#method-i-decode","()","<p>MSS options with lengths other than 4 are malformed.\n"],["decode","PacketFu::TcpOption::NOP","classes/PacketFu/TcpOption/NOP.html#method-i-decode","()",""],["decode","PacketFu::TcpOption::SACK","classes/PacketFu/TcpOption/SACK.html#method-i-decode","()",""],["decode","PacketFu::TcpOption::SACKOK","classes/PacketFu/TcpOption/SACKOK.html#method-i-decode","()","<p>SACKOK options with sizes other than 2 are malformed.\n"],["decode","PacketFu::TcpOption::TS","classes/PacketFu/TcpOption/TS.html#method-i-decode","()","<p>TS options with lengths other than 10 are malformed.\n"],["decode","PacketFu::TcpOption::WS","classes/PacketFu/TcpOption/WS.html#method-i-decode","()","<p>WS options with lengths other than 3 are malformed.\n"],["decode","PacketFu::TcpOptions","classes/PacketFu/TcpOptions.html#method-i-decode","()","<p>Decode parses the TcpOptions object’s member options, and produces a\nhuman-readable string by iterating …\n"],["dissect","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-dissect","()","<p>Renders the dissection_table suitable for screen printing. Can take one or\ntwo arguments. If just the …\n"],["dissection_table","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-dissection_table","()",""],["do_scan","Object","classes/Object.html#method-i-do_scan","()","\n<pre>Portscanning!\nRun this on one machine</pre>\n<p>cap = Capture.new(:iface=&gt;‘wlan0’) # or whatever your interface …\n"],["encode","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-encode","(str)","<p>Generally, encoding a value is going to be just a read. Some options will\ntreat things a little differently; …\n"],["encode","PacketFu::TcpOption::SACK","classes/PacketFu/TcpOption/SACK.html#method-i-encode","(str)",""],["encode","PacketFu::TcpOption::TS","classes/PacketFu/TcpOption/TS.html#method-i-encode","(str)","<p>TS options are in the format of “TS:[timestamp value];[timestamp secret]”\nBoth should be written …\n"],["encode","PacketFu::TcpOptions","classes/PacketFu/TcpOptions.html#method-i-encode","(str)","<p>Encode takes a human-readable string and appends the corresponding binary\noptions to the TcpOptions object. …\n"],["encode!","PacketFu::TcpOptions","classes/PacketFu/TcpOptions.html#method-i-encode-21","(str)","<p>Like TcpOption#encode, except the entire contents are replaced.\n"],["eth_daddr","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_daddr","()","<p>Gets the destination MAC address in a more readable way.\n"],["eth_daddr","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_daddr","()",""],["eth_daddr=","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_daddr-3D","(mac)","<p>Set the destination MAC address in a more readable way.\n"],["eth_daddr=","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_daddr-3D","(v)",""],["eth_dst","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_dst","()","<p>Getter for the Ethernet destination address.\n"],["eth_dst","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_dst","()",""],["eth_dst=","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_dst-3D","(i)","<p>Setter for the Ethernet destination address.\n"],["eth_dst=","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_dst-3D","(v)",""],["eth_dst_readable","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_dst_readable","()","<p>Readability aliases\n"],["eth_dst_readable","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_dst_readable","()",""],["eth_proto","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_proto","()","<p>Getter for the Ethernet protocol number.\n"],["eth_proto","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_proto","()",""],["eth_proto=","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_proto-3D","(i)","<p>Setter for the Ethernet protocol number.\n"],["eth_proto=","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_proto-3D","(v)",""],["eth_proto_readable","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_proto_readable","()",""],["eth_proto_readable","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_proto_readable","()",""],["eth_saddr","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_saddr","()","<p>Gets the source MAC address in a more readable way.\n"],["eth_saddr","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_saddr","()",""],["eth_saddr=","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_saddr-3D","(mac)","<p>Sets the source MAC address in a more readable way.\n"],["eth_saddr=","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_saddr-3D","(v)",""],["eth_src","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_src","()","<p>Getter for the Ethernet source address.\n"],["eth_src","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_src","()",""],["eth_src=","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_src-3D","(i)","<p>Setter for the Ethernet source address.\n"],["eth_src=","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_src-3D","(v)",""],["eth_src_readable","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-eth_src_readable","()",""],["eth_src_readable","PacketFu::EthHeaderMixin","classes/PacketFu/EthHeaderMixin.html#method-i-eth_src_readable","()",""],["f2a","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-f2a","(args={})",""],["f2a","PacketFu::Read","classes/PacketFu/Read.html#method-c-f2a","(args={})",""],["file_to_array","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-file_to_array","(args={})","<p>file_to_array() translates a libpcap file into an array of packets. Note\nthat this strips out pcap timestamps …\n"],["file_to_array","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-c-file_to_array","(fname)","<p>Takes a given file and returns an array of the packet bytes. Here  for\nbackwards compatibilty.\n"],["file_to_array","PacketFu::Read","classes/PacketFu/Read.html#method-c-file_to_array","(args={})","<p>A wrapper for PcapFile#file_to_array, but only returns the array. Actually\nusing the PcapFile object …\n"],["fin=","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-fin-3D","(i)","<p>Setter for the Finish flag.\n"],["force_binary","PacketFu","classes/PacketFu.html#method-c-force_binary","(str)","<p>Deal with Ruby’s encoding by ignoring it.\n"],["force_binary","PacketFu::Packet","classes/PacketFu/Packet.html#method-c-force_binary","(str)","<p>Force strings into binary.\n"],["force_binary","PacketFu::PcapPackets","classes/PacketFu/PcapPackets.html#method-i-force_binary","(str)",""],["force_binary","Struct","classes/Struct.html#method-i-force_binary","(str)","<p>Monkeypatch for Struct to include some string safety – anything that uses\nStruct is going to presume …\n"],["format_packets","PacketFu::Write","classes/PacketFu/Write.html#method-c-format_packets","(args={})","<p>format_packets: Pretty much totally deprecated.\n"],["gen_packets","Object","classes/Object.html#method-i-gen_packets","()",""],["get_byte_order","PacketFu::Read","classes/PacketFu/Read.html#method-c-get_byte_order","(pcap_file)","<p>Reads the magic string of a pcap file, and determines if it’s :little or\n:big endian.\n"],["handle_is_identity","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-handle_is_identity","(ptype)",""],["has_optlen?","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-has_optlen-3F","()","<p>Returns true if this option has an optlen. Some don’t.\n"],["has_value?","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-has_value-3F","()","<p>Returns true if this option has a value. Some don’t.\n"],["hexify","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-hexify","(str)","<p>Hexify provides a neatly-formatted dump of binary data, familar to hex\nreaders.\n"],["hsrp_addr","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_addr","()","<p>Returns a more readable IP source address.\n"],["hsrp_addr","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_addr","()",""],["hsrp_addr=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_addr-3D","(addr)",""],["hsrp_addr=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_addr-3D","(v)",""],["hsrp_group","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_group","()","<p>Getter for the type.\n"],["hsrp_group","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_group","()",""],["hsrp_group=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_group-3D","(i)","<p>Setter for the type.\n"],["hsrp_group=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_group-3D","(v)",""],["hsrp_hellotime","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_hellotime","()","<p>Getter for the type.\n"],["hsrp_hellotime","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_hellotime","()",""],["hsrp_hellotime=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_hellotime-3D","(i)","<p>Setter for the type.\n"],["hsrp_hellotime=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_hellotime-3D","(v)",""],["hsrp_holdtime","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_holdtime","()","<p>Getter for the type.\n"],["hsrp_holdtime","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_holdtime","()",""],["hsrp_holdtime=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_holdtime-3D","(i)","<p>Setter for the type.\n"],["hsrp_holdtime=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_holdtime-3D","(v)",""],["hsrp_opcode","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_opcode","()","<p>Getter for the type.\n"],["hsrp_opcode","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_opcode","()",""],["hsrp_opcode=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_opcode-3D","(i)","<p>Setter for the type.\n"],["hsrp_opcode=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_opcode-3D","(v)",""],["hsrp_password","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_password","()",""],["hsrp_password=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_password-3D","(v)",""],["hsrp_password_readable","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_password_readable","()",""],["hsrp_password_readable","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_password_readable","()",""],["hsrp_priority","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_priority","()","<p>Getter for the type.\n"],["hsrp_priority","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_priority","()",""],["hsrp_priority=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_priority-3D","(i)","<p>Setter for the type.\n"],["hsrp_priority=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_priority-3D","(v)",""],["hsrp_reserved","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_reserved","()","<p>Getter for the type.\n"],["hsrp_reserved","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_reserved","()",""],["hsrp_reserved=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_reserved-3D","(i)","<p>Setter for the type.\n"],["hsrp_reserved=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_reserved-3D","(v)",""],["hsrp_state","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_state","()","<p>Getter for the type.\n"],["hsrp_state","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_state","()",""],["hsrp_state=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_state-3D","(i)","<p>Setter for the type.\n"],["hsrp_state=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_state-3D","(v)",""],["hsrp_version","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_version","()","<p>Getter for the type.\n"],["hsrp_version","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_version","()",""],["hsrp_version=","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_version-3D","(i)","<p>Setter for the type.\n"],["hsrp_version=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_version-3D","(v)",""],["hsrp_vip","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_vip","()",""],["hsrp_vip=","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_vip-3D","(v)",""],["hsrp_vip_readable","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-hsrp_vip_readable","()","<p>Readability aliases\n"],["hsrp_vip_readable","PacketFu::HSRPHeaderMixin","classes/PacketFu/HSRPHeaderMixin.html#method-i-hsrp_vip_readable","()",""],["icmp_calc_sum","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_calc_sum","()","<p>Calculates and sets the checksum for the object.\n"],["icmp_calc_sum","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_calc_sum","()",""],["icmp_code","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_code","()","<p>Getter for the code.\n"],["icmp_code","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_code","()",""],["icmp_code=","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_code-3D","(i)","<p>Setter for the code.\n"],["icmp_code=","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_code-3D","(v)",""],["icmp_recalc","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_recalc","(arg=:all)","<p>Recalculates the calculatable fields for ICMP.\n"],["icmp_recalc","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_recalc","(*v)",""],["icmp_sum","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_sum","()","<p>Getter for the checksum.\n"],["icmp_sum","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_sum","()",""],["icmp_sum=","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_sum-3D","(i)","<p>Setter for the checksum. Note, this is calculated automatically with \nicmp_calc_sum.\n"],["icmp_sum=","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_sum-3D","(v)",""],["icmp_sum_readable","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_sum_readable","()","<p>Readability aliases\n"],["icmp_sum_readable","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_sum_readable","()",""],["icmp_type","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_type","()","<p>Getter for the type.\n"],["icmp_type","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_type","()",""],["icmp_type=","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-icmp_type-3D","(i)","<p>Setter for the type.\n"],["icmp_type=","PacketFu::ICMPHeaderMixin","classes/PacketFu/ICMPHeaderMixin.html#method-i-icmp_type-3D","(v)",""],["ifconfig","PacketFu::Utils","classes/PacketFu/Utils.html#method-c-ifconfig","(iface='eth0')","<p>Handles ifconfig for various (okay, two) platforms. Will have Windows done\nshortly.\n<p>Takes an argument …\n"],["inherited","PacketFu::Packet","classes/PacketFu/Packet.html#method-c-inherited","(subclass)","<p>Register subclasses in PacketFu.packet_class to do all kinds of neat things\nthat obviates those long …\n"],["init_fields","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-init_fields","(args={})","<p>Called by initialize to set the initial fields.\n"],["init_fields","PacketFu::PcapHeader","classes/PacketFu/PcapHeader.html#method-i-init_fields","(args={})","<p>Called by initialize to set the initial fields.\n"],["init_fields","PacketFu::PcapPacket","classes/PacketFu/PcapPacket.html#method-i-init_fields","(args={})","<p>Called by initialize to set the initial fields.\n"],["init_fields","PacketFu::Timestamp","classes/PacketFu/Timestamp.html#method-i-init_fields","(args={})","<p>Called by initialize to set the initial fields.\n"],["inject","PacketFu::Inject","classes/PacketFu/Inject.html#method-i-inject","(args={})","<p>Equivalent to array_to_wire\n"],["inspect","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-inspect","()","<p>For packets, inspect is overloaded as inspect_hex(0). Not sure if this is a\ngreat idea yet, but it sure …\n"],["inspect_hex","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-inspect_hex","(arg=0)","<p>If @inspect_style is :default (or :ugly), the inspect output is the usual\ninspect.\n<p>If @inspect_style …\n"],["inspect_style","PacketFu","classes/PacketFu.html#method-c-inspect_style","()","<p>The current inspect style. One of :hex, :dissect, or :default Note that\n:default means Ruby’s default, …\n"],["inspect_style=","PacketFu","classes/PacketFu.html#method-c-inspect_style-3D","(arg)","<p>Setter for PacketFu’s @inspect_style\n"],["inspect_style=","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-inspect_style-3D","()","<p>Delegate to PacketFu’s inspect_style, since the class variable name is the\nsame. Yay for namespace pollution! …\n"],["ip_calc_id","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_calc_id","()","<p>Retrieve the IP ID\n"],["ip_calc_id","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_calc_id","()",""],["ip_calc_len","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_calc_len","()","<p>Calulcate the true length of the packet.\n"],["ip_calc_len","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_calc_len","()",""],["ip_calc_sum","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_calc_sum","()","<p>Calculate the true checksum of the packet. (Yes, this is the long way to do\nit, but it’s e-z-2-read for …\n"],["ip_calc_sum","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_calc_sum","()",""],["ip_daddr","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_daddr","()","<p>Returns a more readable IP destination address.\n"],["ip_daddr","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_daddr","()",""],["ip_daddr=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_daddr-3D","(addr)","<p>Sets a more readable IP address.\n"],["ip_daddr=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_daddr-3D","(v)",""],["ip_dst","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_dst","()","<p>Getter for the destination IP address.\n"],["ip_dst","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_dst","()",""],["ip_dst=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_dst-3D","(i)","<p>Setter for the destination IP address.\n"],["ip_dst=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_dst-3D","(v)",""],["ip_dst_readable","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_dst_readable","()",""],["ip_dst_readable","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_dst_readable","()",""],["ip_frag","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_frag","()","<p>Getter for the fragmentation ID.\n"],["ip_frag","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_frag","()",""],["ip_frag=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_frag-3D","(i)","<p>Setter for the fragmentation ID.\n"],["ip_frag=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_frag-3D","(v)",""],["ip_hl","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_hl","()","<p>Getter for the header length (multiply by 4)\n"],["ip_hl","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_hl","()",""],["ip_hl=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_hl-3D","(i)","<p>Setter for the header length (divide by 4)\n"],["ip_hl=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_hl-3D","(v)",""],["ip_hlen","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_hlen","()","<p>Return the claimed header length\n"],["ip_hlen","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_hlen","()",""],["ip_id","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_id","()","<p>Getter for the identication number.\n"],["ip_id","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_id","()",""],["ip_id=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_id-3D","(i)","<p>Setter for the identication number.\n"],["ip_id=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_id-3D","(v)",""],["ip_id_readable","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_id_readable","()",""],["ip_id_readable","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_id_readable","()",""],["ip_len","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_len","()","<p>Getter for total length.\n"],["ip_len","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_len","()",""],["ip_len=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_len-3D","(i)","<p>Setter for total length.\n"],["ip_len=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_len-3D","(v)",""],["ip_proto","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_proto","()","<p>Getter for the protocol number.\n"],["ip_proto","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_proto","()",""],["ip_proto=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_proto-3D","(i)","<p>Setter for the protocol number.\n"],["ip_proto=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_proto-3D","(v)",""],["ip_recalc","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_recalc","(arg=:all)","<p>Recalculate the calculated IP fields. Valid arguments are:\n\n<pre>:all \n:ip_len \n:ip_sum \n:ip_id</pre>\n"],["ip_recalc","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_recalc","(*args)",""],["ip_saddr","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_saddr","()","<p>Returns a more readable IP source address.\n"],["ip_saddr","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_saddr","()",""],["ip_saddr=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_saddr-3D","(addr)","<p>Sets a more readable IP address. If you wants to manipulate individual\noctets,  (eg, for host scanning …\n"],["ip_saddr=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_saddr-3D","(v)",""],["ip_src","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_src","()","<p>Getter for the source IP address.\n"],["ip_src","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_src","()",""],["ip_src=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_src-3D","(i)","<p>Setter for the source IP address.\n"],["ip_src=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_src-3D","(v)",""],["ip_src_readable","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_src_readable","()","<p>Readability aliases\n"],["ip_src_readable","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_src_readable","()",""],["ip_sum","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_sum","()","<p>Getter for the checksum.\n"],["ip_sum","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_sum","()",""],["ip_sum=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_sum-3D","(i)","<p>Setter for the checksum.\n"],["ip_sum=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_sum-3D","(v)",""],["ip_sum_readable","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_sum_readable","()",""],["ip_sum_readable","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_sum_readable","()",""],["ip_tos","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_tos","()","<p>Getter for the differentiated services\n"],["ip_tos","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_tos","()",""],["ip_tos=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_tos-3D","(i)","<p>Setter for the differentiated services\n"],["ip_tos=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_tos-3D","(v)",""],["ip_ttl","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_ttl","()","<p>Getter for the time to live.\n"],["ip_ttl","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_ttl","()",""],["ip_ttl=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_ttl-3D","(i)","<p>Setter for the time to live.\n"],["ip_ttl=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_ttl-3D","(v)",""],["ip_v","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_v","()","<p>Getter for the version.\n"],["ip_v","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_v","()",""],["ip_v=","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-ip_v-3D","(i)","<p>Setter for the version.\n"],["ip_v=","PacketFu::IPHeaderMixin","classes/PacketFu/IPHeaderMixin.html#method-i-ip_v-3D","(v)",""],["ipv6_calc_len","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_calc_len","()","<p>Calculates the payload length.\n"],["ipv6_calc_len","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_calc_len","()",""],["ipv6_class","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_class","()","<p>Getter for the traffic class.\n"],["ipv6_class","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_class","()",""],["ipv6_class=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_class-3D","(i)","<p>Setter for the traffic class.\n"],["ipv6_class=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_class-3D","(v)",""],["ipv6_daddr","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_daddr","()","<p>Get the destination address in a more readable form.\n"],["ipv6_daddr","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_daddr","()",""],["ipv6_daddr=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_daddr-3D","(str)","<p>Set the destination address in a more readable form.\n"],["ipv6_daddr=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_daddr-3D","(v)",""],["ipv6_dst","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_dst","()","<p>Getter for the destination address.\n"],["ipv6_dst","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_dst","()",""],["ipv6_dst=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_dst-3D","(i)","<p>Setter for the destination address.\n"],["ipv6_dst=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_dst-3D","(v)",""],["ipv6_dst_readable","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_dst_readable","()",""],["ipv6_dst_readable","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_dst_readable","()",""],["ipv6_hop","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_hop","()","<p>Getter for the hop limit.\n"],["ipv6_hop","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_hop","()",""],["ipv6_hop=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_hop-3D","(i)","<p>Setter for the hop limit.\n"],["ipv6_hop=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_hop-3D","(v)",""],["ipv6_label","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_label","()","<p>Getter for the flow label.\n"],["ipv6_label","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_label","()",""],["ipv6_label=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_label-3D","(i)","<p>Setter for the flow label.\n"],["ipv6_label=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_label-3D","(v)",""],["ipv6_len","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_len","()","<p>Getter for the payload length.\n"],["ipv6_len","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_len","()",""],["ipv6_len=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_len-3D","(i)","<p>Setter for the payload length.\n"],["ipv6_len=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_len-3D","(v)",""],["ipv6_next","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_next","()","<p>Getter for the next protocol header.\n"],["ipv6_next","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_next","()",""],["ipv6_next=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_next-3D","(i)","<p>Setter for the next protocol header.\n"],["ipv6_next=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_next-3D","(v)",""],["ipv6_recalc","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_recalc","(arg=:all)","<p>Recalculates the calculatable fields for this object.\n"],["ipv6_recalc","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_recalc","(*v)",""],["ipv6_saddr","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_saddr","()","<p>Get the source address in a more readable form.\n"],["ipv6_saddr","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_saddr","()",""],["ipv6_saddr=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_saddr-3D","(str)","<p>Set the source address in a more readable form.\n"],["ipv6_saddr=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_saddr-3D","(v)",""],["ipv6_src","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_src","()","<p>Getter for the source address.\n"],["ipv6_src","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_src","()",""],["ipv6_src=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_src-3D","(i)","<p>Setter for the source address.\n"],["ipv6_src=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_src-3D","(v)",""],["ipv6_src_readable","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_src_readable","()","<p>Readability aliases\n"],["ipv6_src_readable","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_src_readable","()",""],["ipv6_v","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_v","()","<p>Getter for the version (usually, 6).\n"],["ipv6_v","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_v","()",""],["ipv6_v=","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-ipv6_v-3D","(i)","<p>Setter for the version (usually, 6).\n"],["ipv6_v=","PacketFu::IPv6HeaderMixin","classes/PacketFu/IPv6HeaderMixin.html#method-i-ipv6_v-3D","(v)",""],["kind=","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-kind-3D","(i)","<p>Setter for the “kind” byte of this option.\n"],["kind_of?","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-kind_of-3F","(klass)",""],["layer","PacketFu::InvalidPacket","classes/PacketFu/InvalidPacket.html#method-c-layer","()",""],["layer","PacketFu::Packet","classes/PacketFu/Packet.html#method-c-layer","()","<p>Defines the layer this packet type lives at, based on the number of headers\nit  requires. Note that this …\n"],["layer","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-layer","()",""],["layer_symbol","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-layer_symbol","()",""],["layer_symbol","PacketFu::Packet","classes/PacketFu/Packet.html#method-c-layer_symbol","()",""],["len","StructFu","classes/StructFu.html#method-i-len","()",""],["len","StructFu::IntString","classes/StructFu/IntString.html#method-i-len","()","<p>Shorthand for querying a length. Note that the usual “length” and “size”\nrefer to …\n"],["len=","StructFu::IntString","classes/StructFu/IntString.html#method-i-len-3D","(i)","<p>Override the size, if you must.\n"],["length","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-length","()",""],["lookupdev","PacketFu::Utils","classes/PacketFu/Utils.html#method-c-lookupdev","()","<p>This is a brute-force approach at trying to find a suitable interface with\nan IP address.\n"],["mac2str","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-c-mac2str","(mac)","<p>Converts a readable MAC (11:22:33:44:55:66) to a binary string.  Readable\nMAC’s may be split on colons, …\n"],["method_missing","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-method_missing","(sym, *args, &block)","<p>method_missing() delegates protocol-specific field actions to the\napporpraite class variable (which contains …\n"],["new","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-c-new","(args={})",""],["new","PacketFu::ARPPacket","classes/PacketFu/ARPPacket.html#method-c-new","(args={})",""],["new","PacketFu::AddrIpv6","classes/PacketFu/AddrIpv6.html#method-c-new","(args={})",""],["new","PacketFu::Capture","classes/PacketFu/Capture.html#method-c-new","(args={})",""],["new","PacketFu::Config","classes/PacketFu/Config.html#method-c-new","(args={})",""],["new","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-c-new","(args={})",""],["new","PacketFu::EthMac","classes/PacketFu/EthMac.html#method-c-new","(args={})",""],["new","PacketFu::EthNic","classes/PacketFu/EthNic.html#method-c-new","(args={})","<p>EthNic does not enjoy StructFu typing.\n"],["new","PacketFu::EthOui","classes/PacketFu/EthOui.html#method-c-new","(args={})","<p>EthOui is unusual in that the bit values do not enjoy StructFu typing.\n"],["new","PacketFu::EthPacket","classes/PacketFu/EthPacket.html#method-c-new","(args={})",""],["new","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-c-new","(args={})",""],["new","PacketFu::HSRPPacket","classes/PacketFu/HSRPPacket.html#method-c-new","(args={})",""],["new","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-c-new","(args={})",""],["new","PacketFu::ICMPPacket","classes/PacketFu/ICMPPacket.html#method-c-new","(args={})",""],["new","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-c-new","(args={})",""],["new","PacketFu::IPPacket","classes/PacketFu/IPPacket.html#method-c-new","(args={})","<p>Creates a new IPPacket object.\n"],["new","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-c-new","(args={})",""],["new","PacketFu::IPv6Packet","classes/PacketFu/IPv6Packet.html#method-c-new","(args={})",""],["new","PacketFu::Inject","classes/PacketFu/Inject.html#method-c-new","(args={})",""],["new","PacketFu::InvalidHeader","classes/PacketFu/InvalidHeader.html#method-c-new","(args={})",""],["new","PacketFu::InvalidPacket","classes/PacketFu/InvalidPacket.html#method-c-new","(args={})",""],["new","PacketFu::Octets","classes/PacketFu/Octets.html#method-c-new","(args={})",""],["new","PacketFu::Packet","classes/PacketFu/Packet.html#method-c-new","(args={})","<p>the Packet class should not be instantiated directly, since it’s an \nabstract class that real packet …\n"],["new","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-c-new","(args={})",""],["new","PacketFu::PcapHeader","classes/PacketFu/PcapHeader.html#method-c-new","(args={})",""],["new","PacketFu::PcapPacket","classes/PacketFu/PcapPacket.html#method-c-new","(args={})",""],["new","PacketFu::PcapPackets","classes/PacketFu/PcapPackets.html#method-c-new","(args={})",""],["new","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-c-new","(args={})",""],["new","PacketFu::TCPPacket","classes/PacketFu/TCPPacket.html#method-c-new","(args={})",""],["new","PacketFu::TcpEcn","classes/PacketFu/TcpEcn.html#method-c-new","(args={})",""],["new","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-c-new","(args={})",""],["new","PacketFu::TcpHlen","classes/PacketFu/TcpHlen.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::ECHO","classes/PacketFu/TcpOption/ECHO.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::ECHOREPLY","classes/PacketFu/TcpOption/ECHOREPLY.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::EOL","classes/PacketFu/TcpOption/EOL.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::MSS","classes/PacketFu/TcpOption/MSS.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::NOP","classes/PacketFu/TcpOption/NOP.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::SACK","classes/PacketFu/TcpOption/SACK.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::SACKOK","classes/PacketFu/TcpOption/SACKOK.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::TS","classes/PacketFu/TcpOption/TS.html#method-c-new","(args={})",""],["new","PacketFu::TcpOption::WS","classes/PacketFu/TcpOption/WS.html#method-c-new","(args={})",""],["new","PacketFu::TcpReserved","classes/PacketFu/TcpReserved.html#method-c-new","(args={})",""],["new","PacketFu::Timestamp","classes/PacketFu/Timestamp.html#method-c-new","(args={})",""],["new","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-c-new","(args={})",""],["new","PacketFu::UDPPacket","classes/PacketFu/UDPPacket.html#method-c-new","(args={})",""],["new","StructFu::Int","classes/StructFu/Int.html#method-c-new","(value=nil, endian=nil, width=nil, default=nil)",""],["new","StructFu::Int16","classes/StructFu/Int16.html#method-c-new","(v=nil, e=:big)",""],["new","StructFu::Int16le","classes/StructFu/Int16le.html#method-c-new","(v=nil, e=:little)",""],["new","StructFu::Int32","classes/StructFu/Int32.html#method-c-new","(v=nil, e=:big)",""],["new","StructFu::Int32le","classes/StructFu/Int32le.html#method-c-new","(v=nil, e=:little)",""],["new","StructFu::Int8","classes/StructFu/Int8.html#method-c-new","(v=nil)",""],["new","StructFu::IntString","classes/StructFu/IntString.html#method-c-new","(string='',int=Int8,mode=nil)",""],["newer_than?","PacketFu","classes/PacketFu.html#method-c-newer_than-3F","(str)","<p>Returns true if the current version is newer than the compare version.\n"],["next","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-next","()","<p>next() exposes the Stream object’s next method to the outside world.\n"],["o1","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-o1","()","<p>Returns the value for the first octet\n"],["o2","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-o2","()","<p>Returns the value for the second octet\n"],["o3","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-o3","()","<p>Returns the value for the third octet\n"],["o4","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-o4","()","<p>Returns the value for the fourth octet\n"],["octet_array","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-c-octet_array","(addr)","<p>Translate various formats of IPv4 Addresses to an array of digits.\n"],["octets","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-octets","()","<p>Returns the IP address as 4 octets\n"],["older_than?","PacketFu","classes/PacketFu.html#method-c-older_than-3F","(str)","<p>Returns true if the current version is older than the compare version.\n"],["optlen=","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-optlen-3D","(i)","<p>Setter for the “option length” byte for this option.\n"],["optlen=","PacketFu::TcpOption::SACK","classes/PacketFu/TcpOption/SACK.html#method-i-optlen-3D","(i)",""],["orig_kind_of?","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-orig_kind_of-3F","(klass)",""],["packet_classes","PacketFu","classes/PacketFu.html#method-c-packet_classes","()","<p>Returns an array of packet classes\n"],["packet_prefixes","PacketFu","classes/PacketFu.html#method-c-packet_prefixes","()","<p>Returns an array of packet types by packet prefix.\n"],["packetfu_ascii_art","Object","classes/Object.html#method-i-packetfu_ascii_art","()","<p>Draws a picture. Includes a nunchuck, so you know that it’s serious. I\n/think/ this is how you’re supposed …\n"],["parse","PacketFu::Packet","classes/PacketFu/Packet.html#method-c-parse","(packet=nil,args={})","<p>Parse() creates the correct packet type based on the data, and returns the\napporpiate Packet subclass …\n"],["parse","StructFu::IntString","classes/StructFu/IntString.html#method-i-parse","(s)","<p>parse() is like read(), except that it interprets the string, either based\non the declared length, or …\n"],["payload","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-payload","()","<p>Get the outermost payload (body) of the packet; this is why all packet\nheaders should have a body type. …\n"],["payload=","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-payload-3D","(args)","<p>Set the outermost payload (body) of the packet.\n"],["pcaprub_loaded?","PacketFu","classes/PacketFu.html#method-c-pcaprub_loaded-3F","()","<p>Returns the status of pcaprub\n"],["pcaprub_platform_require","PacketFu","classes/PacketFu.html#method-c-pcaprub_platform_require","()","<p>PacketFu works best with Pcaprub version 0.8-dev (at least) The current\n(Aug 01, 2010) pcaprub gem is …\n"],["peek","PacketFu::IPv6Packet","classes/PacketFu/IPv6Packet.html#method-i-peek","(args={})","<p>Peek provides summary data on packet contents.\n"],["peek","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-peek","(args={})","<p>Peek provides summary data on packet contents.\n<p>Each packet type should provide a peek_format.\n"],["peek_format","PacketFu::ARPPacket","classes/PacketFu/ARPPacket.html#method-i-peek_format","()","<p>Generates summary data for ARP packets.\n"],["peek_format","PacketFu::HSRPPacket","classes/PacketFu/HSRPPacket.html#method-i-peek_format","()","<p>Peek provides summary data on packet contents.\n"],["peek_format","PacketFu::ICMPPacket","classes/PacketFu/ICMPPacket.html#method-i-peek_format","()","<p>Peek provides summary data on packet contents.\n"],["peek_format","PacketFu::IPPacket","classes/PacketFu/IPPacket.html#method-i-peek_format","()","<p>Peek provides summary data on packet contents.\n"],["peek_format","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-peek_format","()","<p>The peek_format is used to display a single line of packet data useful for\neyeballing. It should not …\n"],["peek_format","PacketFu::TCPPacket","classes/PacketFu/TCPPacket.html#method-i-peek_format","()","<p>TCP packets are denoted by a “T  ”, followed by size, source and dest\ninformation, packet flags, …\n"],["peek_format","PacketFu::UDPPacket","classes/PacketFu/UDPPacket.html#method-i-peek_format","()","<p>Peek provides summary data on packet contents.\n"],["print_results","Object","classes/Object.html#method-i-print_results","(stats)",""],["proto","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-proto","()","<p>Returns an array of protocols contained in this packet. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">PacketFu</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TCPPacket</span>.<span class=\"ruby-identifier\">new</span>\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">00</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["protocol","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-protocol","()",""],["psh=","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-psh-3D","(i)","<p>Setter for the Push flag.\n"],["rand_port","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-rand_port","()","<p>Generates a random high port. This is affected by packet flavor.\n"],["rand_source_ip","Object","classes/Object.html#method-i-rand_source_ip","()",""],["read","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::ARPPacket","classes/PacketFu/ARPPacket.html#method-i-read","(str=nil,args={})",""],["read","PacketFu::AddrIpv6","classes/PacketFu/AddrIpv6.html#method-i-read","(str)","<p>Reads in a string and casts it as an IPv6 address\n"],["read","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::EthMac","classes/PacketFu/EthMac.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::EthNic","classes/PacketFu/EthNic.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::EthOui","classes/PacketFu/EthOui.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::EthPacket","classes/PacketFu/EthPacket.html#method-i-read","(str=nil,args={})",""],["read","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::HSRPPacket","classes/PacketFu/HSRPPacket.html#method-i-read","(str=nil, args={})",""],["read","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::ICMPPacket","classes/PacketFu/ICMPPacket.html#method-i-read","(str=nil, args={})",""],["read","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::IPPacket","classes/PacketFu/IPPacket.html#method-i-read","(str=nil, args={})",""],["read","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::IPv6Packet","classes/PacketFu/IPv6Packet.html#method-i-read","(str=nil,args={})",""],["read","PacketFu::InvalidHeader","classes/PacketFu/InvalidHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::InvalidPacket","classes/PacketFu/InvalidPacket.html#method-i-read","(str=nil,args={})",""],["read","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-read","(args={})","<p>Read() takes (and trusts) the io input and shoves it all into a well-formed\nPacket. Note that read is …\n"],["read","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-read","(str)","<p>Reads a string to populate the object. Note that this appends new packets\nto any existing packets in …\n"],["read","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-c-read","(fname,&block)","<p>Takes a given file name, and reads out the packets. If given a block, it\nwill yield back a PcapPacket …\n"],["read","PacketFu::PcapHeader","classes/PacketFu/PcapHeader.html#method-i-read","(str)","<p>Reads a string to populate the object. TODO: Need to test this by getting a\nhold of a big endian pcap …\n"],["read","PacketFu::PcapPacket","classes/PacketFu/PcapPacket.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::PcapPackets","classes/PacketFu/PcapPackets.html#method-i-read","(str)","<p>Reads a string to populate the object. Note, this read takes in the  whole\npcap file, since we need to …\n"],["read","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::TCPPacket","classes/PacketFu/TCPPacket.html#method-i-read","(str=nil, args={})",""],["read","PacketFu::TcpEcn","classes/PacketFu/TcpEcn.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::TcpHlen","classes/PacketFu/TcpHlen.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::TcpOptions","classes/PacketFu/TcpOptions.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::TcpReserved","classes/PacketFu/TcpReserved.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::Timestamp","classes/PacketFu/Timestamp.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-read","(str)","<p>Reads a string to populate the object.\n"],["read","PacketFu::UDPPacket","classes/PacketFu/UDPPacket.html#method-i-read","(str=nil, args={})",""],["read","StructFu::Int","classes/StructFu/Int.html#method-i-read","(i)","<p>Reads either an Integer or a packed string, and populates the value\naccordingly.\n"],["read","StructFu::IntString","classes/StructFu/IntString.html#method-i-read","(s)","<p>Read takes a string, assumes an int width as previously defined upon\ninitialization, but makes no guarantees …\n"],["read","StructFu::String","classes/StructFu/String.html#method-i-read","(str)",""],["read!","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-read-21","(str)","<p>Clears the contents of the PcapFile prior to reading in a new string.\n"],["read_packet_bytes","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-c-read_packet_bytes","(fname,&block)","<p>Takes a filename, and an optional block. If a block is given,  yield back\nthe raw packet data from the …\n"],["read_packet_bytes","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-read_packet_bytes","(fname=@filename,&block)","<p>Calls the class method with this object’s @filename\n"],["read_packets","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-read_packets","(fname=@filename,&block)","<p>Calls the class method with this object’s @filename\n"],["read_packets","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-c-read_packets","(fname,&block)","<p>Takes a filename, and an optional block. If a block is given, yield back\nparsed packets from the given …\n"],["read_quad","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-read_quad","(str)","<p>Set the IP Address by reading a dotted-quad address.\n"],["read_x","PacketFu::AddrIpv6","classes/PacketFu/AddrIpv6.html#method-i-read_x","(str)","<p>Reads in a colon-delimited hex string and casts it as an IPv6 address.\n"],["readfile","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-readfile","(file)","<p>A shorthand method for opening a file and reading in the packets. Note that\nreadfile clears any existing …\n"],["recalc","PacketFu::ARPPacket","classes/PacketFu/ARPPacket.html#method-i-recalc","(args={})","<p>While there are lengths in ARPPackets, there’s not much to do with them.\n"],["recalc","PacketFu::EthPacket","classes/PacketFu/EthPacket.html#method-i-recalc","(args={})","<p>Does nothing, really, since there’s no length or checksum to calculate for\na straight Ethernet packet. …\n"],["recalc","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-recalc","(arg=:all)","<p>Recalculates all the calcuated fields for all headers in the packet. This\nis important since read() wipes …\n"],["remove_packet_class","PacketFu","classes/PacketFu.html#method-c-remove_packet_class","(klass)","<p>Presumably, there may be a time where you’d like to remove a packet class.\n"],["require_protos","PacketFu","classes/PacketFu.html#method-c-require_protos","(cwd)","<p>Picks up all the protocols defined in the protos subdirectory\n"],["respond_to?","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-respond_to-3F","(sym, include_private = false)",""],["rst=","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-rst-3D","(i)","<p>Setter for the Reset flag.\n"],["save","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-save","(args={})","<p>save() is a equivalent to wire_to_array()\n"],["set_byte_order","PacketFu::Read","classes/PacketFu/Read.html#method-c-set_byte_order","(byte_order)","<p>set_byte_order is pretty much totally deprecated.\n"],["set_endianness","StructFu","classes/StructFu.html#method-i-set_endianness","(e=nil)","<p>Set the endianness for the various Int classes. Takes either :little or\n:big.\n"],["setup_params","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-setup_params","(args={})","<p>Used by new().\n"],["show_live","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-show_live","(args={})","<p>show_live() is a method to capture packets and display peek() data to\nstdout. Valid arguments are:\n\n<pre>:filter ...</pre>\n"],["size","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-size","()","<p>Returns the size of the packet (as a binary string)\n"],["sniff","Object","classes/Object.html#method-i-sniff","(iface)",""],["start","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-start","(args={})","<p>start() is equivalent to capture().\n"],["str2mac","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-c-str2mac","(mac='')","<p>Converts a binary string to a readable MAC (11:22:33:44:55:66).\n<p>irb&gt; PacketFu::EthHeader.str2mac(“ …\n"],["string=","StructFu::IntString","classes/StructFu/IntString.html#method-i-string-3D","(s)","<p>By redefining #string=, we can ensure the correct value is calculated upon\nassignment. If you’d prefer …\n"],["syn=","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-syn-3D","(i)","<p>Setter for the Synchronize flag.\n"],["sz","StructFu","classes/StructFu.html#method-i-sz","()","<p>Instead of returning the “size” of the object, which is usually the number\nof elements of the …\n"],["tcp_ack","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_ack","()","<p>Getter for the TCP ackowlegement number.\n"],["tcp_ack","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_ack","()",""],["tcp_ack=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_ack-3D","(i)","<p>Setter for the TCP ackowlegement number.\n"],["tcp_ack=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_ack-3D","(v)",""],["tcp_ack_readable","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_ack_readable","()",""],["tcp_ack_readable","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_ack_readable","()",""],["tcp_calc_flavor","PacketFu::TCPPacket","classes/PacketFu/TCPPacket.html#method-i-tcp_calc_flavor","(str)","<p>Sets the correct flavor for TCP Packets. Recognized flavors are:\n\n<pre>windows, linux, freebsd</pre>\n"],["tcp_calc_hlen","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_calc_hlen","()","<p>Sets and returns the true length of the TCP Header. TODO: Think about\nmaking all the option stuff safer. …\n"],["tcp_calc_hlen","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_calc_hlen","()",""],["tcp_calc_seq","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_calc_seq","()","<p>Resets the sequence number to a new random number.\n"],["tcp_calc_seq","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_calc_seq","()",""],["tcp_calc_src","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_calc_src","()","<p>Resets the source port to a new random number.\n"],["tcp_calc_src","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_calc_src","()",""],["tcp_calc_sum","PacketFu::TCPPacket","classes/PacketFu/TCPPacket.html#method-i-tcp_calc_sum","()","<p>tcp_calc_sum() computes the TCP checksum, and is called upon intialization.\nIt usually should be called …\n"],["tcp_dport","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_dport","()","<p>Equivalent to tcp_dst.\n"],["tcp_dport","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_dport","()",""],["tcp_dport=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_dport-3D","(arg)","<p>Equivalent to tcp_dst=.\n"],["tcp_dport=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_dport-3D","(v)",""],["tcp_dst","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_dst","()","<p>Getter for the TCP destination port.\n"],["tcp_dst","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_dst","()",""],["tcp_dst=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_dst-3D","(i)","<p>Setter for the TCP destination port.\n"],["tcp_dst=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_dst-3D","(v)",""],["tcp_ecn","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_ecn","()","<p>Getter for the ECN bits.\n"],["tcp_ecn","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_ecn","()",""],["tcp_ecn=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_ecn-3D","(i)","<p>Setter for the ECN bits.\n"],["tcp_ecn=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_ecn-3D","(v)",""],["tcp_flags","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_flags","()",""],["tcp_flags=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_flags-3D","(v)",""],["tcp_flags_dotmap","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_flags_dotmap","()","<p>Gets a more readable flags list\n"],["tcp_flags_dotmap","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_flags_dotmap","()",""],["tcp_flags_readable","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_flags_readable","()","<p>Readability aliases\n"],["tcp_flags_readable","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_flags_readable","()",""],["tcp_hlen","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_hlen","()","<p>Getter for the TCP Header Length value.\n"],["tcp_hlen","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_hlen","()",""],["tcp_hlen=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_hlen-3D","(i)","<p>Setter for the TCP Header Length value. Can take either a string or an\ninteger. Note that if it’s a string, …\n"],["tcp_hlen=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_hlen-3D","(v)",""],["tcp_options","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_options","()","<p>Gets a more readable option list.\n"],["tcp_options","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_options","()",""],["tcp_options=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_options-3D","(arg)","<p>Sets a more readable option list.\n"],["tcp_options=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_options-3D","(v)",""],["tcp_opts","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_opts","()","<p>Getter for TCP Options.\n"],["tcp_opts","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_opts","()",""],["tcp_opts=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_opts-3D","(i)","<p>Setter for TCP Options.\n"],["tcp_opts=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_opts-3D","(v)",""],["tcp_opts_len","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_opts_len","()","<p>Returns the actual length of the TCP options.\n"],["tcp_opts_len","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_opts_len","()",""],["tcp_opts_readable","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_opts_readable","()",""],["tcp_opts_readable","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_opts_readable","()",""],["tcp_recalc","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_recalc","(arg=:all)","<p>Recalculates calculated fields for TCP (except checksum which is at the\nPacket level).\n"],["tcp_recalc","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_recalc","(*v)",""],["tcp_recalc","PacketFu::TCPPacket","classes/PacketFu/TCPPacket.html#method-i-tcp_recalc","(arg=:all)","<p>Recalculates various fields of the TCP packet.\n<p>Parameters\n\n<pre>:all\n  Recomputes all calculated fields.\n:tcp_sum ...</pre>\n"],["tcp_reserved","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_reserved","()","<p>Getter for the TCP Reserved field.\n"],["tcp_reserved","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_reserved","()",""],["tcp_reserved=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_reserved-3D","(i)","<p>Setter for the TCP Reserved field.\n"],["tcp_reserved=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_reserved-3D","(v)",""],["tcp_seq","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_seq","()","<p>Getter for the TCP sequence number.\n"],["tcp_seq","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_seq","()",""],["tcp_seq=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_seq-3D","(i)","<p>Setter for the TCP sequence number.\n"],["tcp_seq=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_seq-3D","(v)",""],["tcp_seq_readable","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_seq_readable","()",""],["tcp_seq_readable","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_seq_readable","()",""],["tcp_sport","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_sport","()","<p>Equivalent to tcp_src.\n"],["tcp_sport","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_sport","()",""],["tcp_sport=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_sport-3D","(arg)","<p>Equivalent to tcp_src=.\n"],["tcp_sport=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_sport-3D","(v)",""],["tcp_src","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_src","()","<p>Getter for the TCP source port.\n"],["tcp_src","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_src","()",""],["tcp_src=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_src-3D","(i)","<p>Setter for the TCP source port.\n"],["tcp_src=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_src-3D","(v)",""],["tcp_sum","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_sum","()","<p>Getter for the TCP checksum.\n"],["tcp_sum","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_sum","()",""],["tcp_sum=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_sum-3D","(i)","<p>Setter for the TCP checksum.\n"],["tcp_sum=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_sum-3D","(v)",""],["tcp_sum_readable","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_sum_readable","()",""],["tcp_sum_readable","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_sum_readable","()",""],["tcp_urg","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_urg","()","<p>Getter for the TCP urgent field.\n"],["tcp_urg","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_urg","()",""],["tcp_urg=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_urg-3D","(i)","<p>Setter for the TCP urgent field.\n"],["tcp_urg=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_urg-3D","(v)",""],["tcp_win","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_win","()","<p>Getter for the TCP window size number.\n"],["tcp_win","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_win","()",""],["tcp_win=","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-tcp_win-3D","(i)","<p>Setter for the TCP window size number.\n"],["tcp_win=","PacketFu::TCPHeaderMixin","classes/PacketFu/TCPHeaderMixin.html#method-i-tcp_win-3D","(v)",""],["to_f","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-to_f","(filename=nil,mode='w')","<p>Put the entire packet into a libpcap file. XXX: this is a hack for now just\nto confirm that packets are …\n"],["to_f","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-to_f","(args={})",""],["to_f","StructFu::Int","classes/StructFu/Int.html#method-i-to_f","()","<p>Returns the Int as a Float.\n"],["to_file","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-to_file","(args={})","<p>Writes the PcapFile to a file. Takes the following arguments:\n\n<pre>:filename # The file to write to.\n:append ...</pre>\n"],["to_i","PacketFu::AddrIpv6","classes/PacketFu/AddrIpv6.html#method-i-to_i","()","<p>Returns the address as a fairly ginormous integer.\n"],["to_i","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-to_i","()","<p>Returns an address in numerical format.\n"],["to_i","PacketFu::TcpEcn","classes/PacketFu/TcpEcn.html#method-i-to_i","()","<p>Returns the TcpEcn field as an integer… even though it’s going to be split\nacross a byte boundary. …\n"],["to_i","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-to_i","()","<p>Returns the TcpFlags as an integer. Also not a great candidate for to_s due\nto the short bitspace.\n"],["to_i","PacketFu::TcpHlen","classes/PacketFu/TcpHlen.html#method-i-to_i","()","<p>Returns the TcpHlen field as an integer. Note these will become the high\nbits at the TCP header’s offset, …\n"],["to_i","PacketFu::TcpReserved","classes/PacketFu/TcpReserved.html#method-i-to_i","()","<p>Returns the Reserved field as an integer.\n"],["to_i","StructFu::Int","classes/StructFu/Int.html#method-i-to_i","()","<p>Returns the Int as an Integer.\n"],["to_pcap","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-to_pcap","(args={})","<p>Converts a packet to libpcap format. Bit of a hack?\n"],["to_s","PacketFu::ARPHeader","classes/PacketFu/ARPHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::AddrIpv6","classes/PacketFu/AddrIpv6.html#method-i-to_s","()","<p>Returns the address in string format.\n"],["to_s","PacketFu::EthHeader","classes/PacketFu/EthHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::EthMac","classes/PacketFu/EthMac.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::EthNic","classes/PacketFu/EthNic.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::EthOui","classes/PacketFu/EthOui.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::HSRPHeader","classes/PacketFu/HSRPHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::ICMPHeader","classes/PacketFu/ICMPHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::IPHeader","classes/PacketFu/IPHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::IPv6Header","classes/PacketFu/IPv6Header.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::InvalidHeader","classes/PacketFu/InvalidHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-to_s","()","<p>Get the binary string of the entire packet.\n"],["to_s","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::PcapHeader","classes/PacketFu/PcapHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::PcapPacket","classes/PacketFu/PcapPacket.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::PcapPackets","classes/PacketFu/PcapPackets.html#method-i-to_s","()",""],["to_s","PacketFu::TCPHeader","classes/PacketFu/TCPHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::TcpHlen","classes/PacketFu/TcpHlen.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::TcpOptions","classes/PacketFu/TcpOptions.html#method-i-to_s","(args={})","<p>If args is set, the options line is automatically padded out with NOPs.\n"],["to_s","PacketFu::Timestamp","classes/PacketFu/Timestamp.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-to_s","()","<p>Returns the object in string form.\n"],["to_s","StructFu::Int","classes/StructFu/Int.html#method-i-to_s","()","<p>This is a parent class definition and should not be used directly.\n"],["to_s","StructFu::Int16","classes/StructFu/Int16.html#method-i-to_s","()","<p>Returns a two byte value as a packed string.\n"],["to_s","StructFu::Int32","classes/StructFu/Int32.html#method-i-to_s","()","<p>Returns a four byte value as a packed string.\n"],["to_s","StructFu::Int8","classes/StructFu/Int8.html#method-i-to_s","()","<p>Returns a one byte value as a packed string.\n"],["to_s","StructFu::IntString","classes/StructFu/IntString.html#method-i-to_s","()","<p>Returns the object as a string, depending on the mode set upon object\ncreation.\n"],["to_w","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-to_w","(iface=nil)","<p>Put the entire packet on the wire by creating a temporary PacketFu::Inject\nobject. TODO: Do something …\n"],["to_x","PacketFu::AddrIpv6","classes/PacketFu/AddrIpv6.html#method-i-to_x","()","<p>Returns the address as a colon-delimited hex string.\n"],["to_x","PacketFu::Octets","classes/PacketFu/Octets.html#method-i-to_x","()","<p>Returns an address in dotted-quad format.\n"],["toggle_inspect","PacketFu","classes/PacketFu.html#method-i-toggle_inspect","()","<p>Switches inspect styles in a round-robin fashion between  :dissect,\n:default, and :hex\n"],["typecast","StructFu","classes/StructFu.html#method-i-typecast","(i)","<p>Typecast is used mostly by packet header classes, such as IPHeader,\nTCPHeader, and the like. It takes …\n"],["udp_calc_len","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_calc_len","()","<p>Returns the true length of the UDP packet.\n"],["udp_calc_len","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_calc_len","()",""],["udp_calc_sum","PacketFu::UDPPacket","classes/PacketFu/UDPPacket.html#method-i-udp_calc_sum","()","<p>udp_calc_sum() computes the UDP checksum, and is called upon intialization.\nIt usually should be called …\n"],["udp_dport","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_dport","()","<p>Equivalent to udp_dst\n"],["udp_dport","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_dport","()",""],["udp_dport=","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_dport-3D","(arg)","<p>Equivalent to udp_dst=\n"],["udp_dport=","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_dport-3D","(v)",""],["udp_dst","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_dst","()","<p>Getter for the UDP destination port.\n"],["udp_dst","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_dst","()",""],["udp_dst=","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_dst-3D","(i)","<p>Setter for the UDP destination port.\n"],["udp_dst=","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_dst-3D","(v)",""],["udp_len","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_len","()","<p>Getter for the length field.\n"],["udp_len","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_len","()",""],["udp_len=","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_len-3D","(i)","<p>Setter for the length field. Usually should be recalc()‘ed instead.\n"],["udp_len=","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_len-3D","(v)",""],["udp_recalc","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_recalc","(args=:all)","<p>Recalculates calculated fields for UDP.\n"],["udp_recalc","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_recalc","(*v)",""],["udp_recalc","PacketFu::UDPPacket","classes/PacketFu/UDPPacket.html#method-i-udp_recalc","(args=:all)","<p>udp_recalc() recalculates various fields of the UDP packet. Valid arguments\nare:\n\n<pre>:all\n  Recomputes all ...</pre>\n"],["udp_sport","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_sport","()","<p>Equivalent to udp_src.to_i\n"],["udp_sport","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_sport","()",""],["udp_sport=","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_sport-3D","(arg)","<p>Equivalent to udp_src=\n"],["udp_sport=","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_sport-3D","(v)",""],["udp_src","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_src","()","<p>Getter for the UDP source port.\n"],["udp_src","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_src","()",""],["udp_src=","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_src-3D","(i)","<p>Setter for the UDP source port.\n"],["udp_src=","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_src-3D","(v)",""],["udp_sum","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_sum","()","<p>Getter for the checksum.\n"],["udp_sum","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_sum","()",""],["udp_sum=","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_sum-3D","(i)","<p>Setter for the checksum. Usually should be recalc()‘ed instad.\n"],["udp_sum=","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_sum-3D","(v)",""],["udp_sum_readable","PacketFu::UDPHeader","classes/PacketFu/UDPHeader.html#method-i-udp_sum_readable","()","<p>Readability aliases\n"],["udp_sum_readable","PacketFu::UDPHeaderMixin","classes/PacketFu/UDPHeaderMixin.html#method-i-udp_sum_readable","()",""],["urg=","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-urg-3D","(i)","<p>Setter for the Urgent flag.\n"],["usage","Object","classes/Object.html#method-i-usage","()",""],["value=","PacketFu::TcpOption","classes/PacketFu/TcpOption.html#method-i-value-3D","(i)","<p>Setter for the value of this option.\n"],["value=","PacketFu::TcpOption::MSS","classes/PacketFu/TcpOption/MSS.html#method-i-value-3D","(i)",""],["value=","PacketFu::TcpOption::SACK","classes/PacketFu/TcpOption/SACK.html#method-i-value-3D","(i)",""],["value=","PacketFu::TcpOption::WS","classes/PacketFu/TcpOption/WS.html#method-i-value-3D","(i)",""],["version","PacketFu","classes/PacketFu.html#method-c-version","()","<p>Returns PacketFu::VERSION\n"],["w2a","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-w2a","(args={})","<p>w2a() is a equivalent to wire_to_array()\n"],["whoami?","PacketFu","classes/PacketFu.html#method-i-whoami-3F","(args={})",""],["whoami?","PacketFu::Utils","classes/PacketFu/Utils.html#method-c-whoami-3F","(args={})","<p>Discovers the local IP and Ethernet address, which is useful for writing\npackets you expect to get a …\n"],["wire_to_array","PacketFu::Capture","classes/PacketFu/Capture.html#method-i-wire_to_array","(args={})","<p>wire_to_array() saves a packet stream as an array of binary strings. From\nhere, packets may accessed …\n"],["write","PacketFu::Packet","classes/PacketFu/Packet.html#method-i-write","(io)","<p>In the event of no proper decoding, at least send it to the inner-most\nheader.\n"],["write","PacketFu::PcapFile","classes/PacketFu/PcapFile.html#method-i-write","(filename='out.pcap')","<p>Shorthand method for writing to a file. Can take either :file =&gt;\n‘name.pcap’ or simply ‘name.pcap …\n"],["zero_or_one","PacketFu::TcpFlags","classes/PacketFu/TcpFlags.html#method-i-zero_or_one","(i=0)","<p>Helper to determine if this flag is a 1 or a 0.\n"],["INSTALL","","files/INSTALL_rdoc.html","","<p>INSTALL\n<p>Installation is pretty straightforward – it’s a gem now!\n<p>$ rvm gem install packetfu\n"],["LICENSE","","files/LICENSE_txt.html","","<p>Copyright © 2008-2012, Tod Beardsley All rights reserved.\n<p>Redistribution and use in source and binary …\n"],["README","","files/README_rdoc.html","","<p>PacketFu\n<p>A library for reading a writing packets to an interface or to a\nlibpcap-formatted file.\n<p>It is …\n"]]}}